{"version":3,"file":"throttle.js","sources":["src/js/utils/throttle.js"],"sourcesContent":["\n/**\n * @function throttle\n * @param  {integer}   FuncDelay\n * @param  {Function} callback\n * @return {Function}                  the throttled function\n */\nexport default function throttle(FuncDelay, callback) {\n  let lastCall = +new Date();\n  const delay = FuncDelay;\n  let params;\n  const context = {};\n  let calledDuringDelay = false;\n\n  return (...args) => {\n    const now = +new Date();\n    const diff = now - lastCall;\n    let timeToEndOfDelay;\n\n    params = args;\n\n    if (diff > delay) {\n      callback.apply(context, params); // Call function with latest parameters\n      calledDuringDelay = false;\n      lastCall = now;\n    } else if (!calledDuringDelay) {\n      // If it wasn't called yet, call it when there is enough delay.\n      timeToEndOfDelay = delay - diff;\n\n      setTimeout(() => {\n        callback.apply(context, params); // Call function with latest parameters\n      }, timeToEndOfDelay);\n\n      calledDuringDelay = true;\n      lastCall = now + timeToEndOfDelay;\n    } // Otherwise do nothing.\n  };\n}\n"],"names":["throttle","FuncDelay","callback","lastCall","Date","delay","params","context","calledDuringDelay","args","now","diff","timeToEndOfDelay","apply"],"mappings":";;;;;;;;;AACA;;;;;;AAMA,AAAe,SAASA,QAAT,CAAkBC,SAAlB,EAA6BC,QAA7B,EAAuC;MAChDC,WAAW,CAAC,IAAIC,IAAJ,EAAhB;MACMC,QAAQJ,SAAd;MACIK,eAAJ;MACMC,UAAU,EAAhB;MACIC,oBAAoB,KAAxB;;SAEO,YAAa;sCAATC,IAAS;UAAA;;;QACZC,MAAM,CAAC,IAAIN,IAAJ,EAAb;QACMO,OAAOD,MAAMP,QAAnB;QACIS,yBAAJ;;aAESH,IAAT;;QAEIE,OAAON,KAAX,EAAkB;eACPQ,KAAT,CAAeN,OAAf,EAAwBD,MAAxB,EADgB;0BAEI,KAApB;iBACWI,GAAX;KAHF,MAIO,IAAI,CAACF,iBAAL,EAAwB;;yBAEVH,QAAQM,IAA3B;;iBAEW,YAAM;iBACNE,KAAT,CAAeN,OAAf,EAAwBD,MAAxB,EADe;OAAjB,EAEGM,gBAFH;;0BAIoB,IAApB;iBACWF,MAAME,gBAAjB;KApBgB;GAApB;;;;;","sourceRoot":"/source/"}
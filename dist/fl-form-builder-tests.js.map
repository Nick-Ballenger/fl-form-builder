{"version":3,"file":"fl-form-builder-tests.js","sources":["src/js/Actions.js","src/tests/actions.js","node_modules/seamless-immutable/src/seamless-immutable.js","src/js/utils/asyncDispatchMiddleware.js","src/tests/utils.asyncDispatchMiddleware.js","node_modules/fl-assert/dist/assert.js","node_modules/ramda/src/internal/_isArray.js","node_modules/ramda/src/internal/_slice.js","node_modules/ramda/src/internal/_checkForMethod.js","node_modules/ramda/src/internal/_isPlaceholder.js","node_modules/ramda/src/internal/_curry1.js","node_modules/ramda/src/internal/_curry2.js","node_modules/ramda/src/internal/_curry3.js","node_modules/ramda/src/slice.js","node_modules/ramda/src/over.js","node_modules/ramda/src/always.js","node_modules/ramda/src/set.js","node_modules/ramda/src/internal/_arity.js","node_modules/ramda/src/internal/_pipe.js","node_modules/ramda/src/internal/_xwrap.js","node_modules/ramda/src/bind.js","node_modules/ramda/src/internal/_isString.js","node_modules/ramda/src/isArrayLike.js","node_modules/ramda/src/internal/_reduce.js","node_modules/ramda/src/reduce.js","node_modules/ramda/src/tail.js","node_modules/ramda/src/pipe.js","node_modules/ramda/src/internal/_concat.js","node_modules/ramda/src/prepend.js","node_modules/ramda/src/prop.js","node_modules/ramda/src/internal/_isTransformer.js","node_modules/ramda/src/internal/_dispatchable.js","node_modules/ramda/src/internal/_map.js","node_modules/ramda/src/internal/_xfBase.js","node_modules/ramda/src/internal/_xmap.js","node_modules/ramda/src/internal/_curryN.js","node_modules/ramda/src/curryN.js","node_modules/ramda/src/internal/_has.js","node_modules/ramda/src/internal/_isArguments.js","node_modules/ramda/src/keys.js","node_modules/ramda/src/map.js","node_modules/ramda/src/lens.js","node_modules/ramda/src/curry.js","src/js/Update/utils.js","src/js/Update/undo.js","node_modules/ramda/src/internal/_identity.js","node_modules/ramda/src/identity.js","node_modules/ramda/src/path.js","node_modules/ramda/src/ap.js","node_modules/ramda/src/reduceRight.js","node_modules/ramda/src/sequence.js","node_modules/ramda/src/traverse.js","node_modules/ramda/src/internal/_arrayFromIterator.js","node_modules/ramda/src/internal/_functionName.js","node_modules/ramda/src/identical.js","node_modules/ramda/src/type.js","node_modules/ramda/src/internal/_equals.js","node_modules/ramda/src/equals.js","node_modules/data.either/lib/either.js","node_modules/data.either/lib/index.js","src/js/Update/importState.js","node_modules/ramda/src/internal/_reduced.js","node_modules/ramda/src/internal/_xfind.js","node_modules/ramda/src/find.js","node_modules/data.task/lib/task.js","node_modules/data.task/lib/index.js","src/js/Update/createField.js","node_modules/ramda/src/append.js","node_modules/data.maybe/lib/maybe.js","node_modules/data.maybe/lib/index.js","src/js/Update/fieldCreated.js","src/js/Update/index.js","src/tests/update/undo.js","src/tests/update/importState.js","src/tests/update/createField.js"],"sourcesContent":["//\n//    ACTION CREATORS\n//\n\nexport const undo = _ =>\n({\n  type: \"undo\",\n});\n\nexport const importState = newFieldsState =>\n({\n  type: \"importState\",\n  newFieldsState,\n});\n\nexport const createField = fieldType =>\n({\n  type: \"createField\",\n  fieldType,\n});\n\nexport const fieldCreated = createdFieldState =>\n({\n  type: \"fieldCreated\",\n  createdFieldState,\n});\n","/* eslint-env jasmine */\n\nimport {\n  undo,\n  importState,\n  createField,\n  fieldCreated,\n} from \"../js/Actions\";\n\ndescribe(\"Action\", () => {\n  describe(\"undo\", () => {\n    it(\"returns the correct action type\", () => {\n      const action = undo();\n      expect(action.type).toEqual(\"undo\");\n    });\n  });\n\n  describe(\"importState\", () => {\n    const mockStateToImport = [\"a\", \"b\"];\n\n    it(\"returns the correct action type\", () => {\n      const action = importState(mockStateToImport);\n      expect(action.type).toEqual(\"importState\");\n    });\n\n    it(\"Creates the correct variables\", () => {\n      const action = importState(mockStateToImport);\n      expect(action.newFieldsState).toEqual(mockStateToImport);\n    });\n  });\n\n  describe(\"createField\", () => {\n    const fieldType = \"testField\";\n\n    it(\"returns the correct action type\", () => {\n      const action = createField(fieldType);\n      expect(action.type).toEqual(\"createField\");\n    });\n\n    it(\"Creates the correct variables\", () => {\n      const action = createField(fieldType);\n      expect(action.fieldType).toEqual(fieldType);\n    });\n  });\n\n  describe(\"fieldCreated\", () => {\n    const createdFieldState = {};\n\n    it(\"returns the correct action type\", () => {\n      const action = fieldCreated(createdFieldState);\n      expect(action.type).toEqual(\"fieldCreated\");\n    });\n\n    it(\"Creates the correct variables\", () => {\n      const action = fieldCreated(createdFieldState);\n      expect(action.createdFieldState).toEqual(createdFieldState);\n    });\n  });\n});\n","(function() {\n  \"use strict\";\n\nfunction immutableInit(config) {\n\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\n  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\n  var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\n\n  var globalConfig = {\n    use_static: false\n  };\n  if (isObject(config)) {\n      if (config.use_static !== undefined) {\n          globalConfig.use_static = Boolean(config.use_static);\n      }\n  }\n\n  function isObject(data) {\n    return (\n      typeof data === 'object' &&\n      !Array.isArray(data) &&\n      data !== null\n    );\n  }\n\n  function instantiateEmptyObject(obj) {\n      var prototype = Object.getPrototypeOf(obj);\n      if (!prototype) {\n          return {};\n      } else {\n          return Object.create(prototype);\n      }\n  }\n\n  function addPropertyTo(target, methodName, value) {\n    Object.defineProperty(target, methodName, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: value\n    });\n  }\n\n  function banProperty(target, methodName) {\n    addPropertyTo(target, methodName, function() {\n      throw new ImmutableError(\"The \" + methodName +\n        \" method cannot be invoked on an Immutable data structure.\");\n    });\n  }\n\n  var immutabilityTag = \"__immutable_invariants_hold\";\n\n  function addImmutabilityTag(target) {\n    addPropertyTo(target, immutabilityTag, true);\n  }\n\n  function isImmutable(target) {\n    if (typeof target === \"object\") {\n      return target === null || Boolean(\n        Object.getOwnPropertyDescriptor(target, immutabilityTag)\n      );\n    } else {\n      // In JavaScript, only objects are even potentially mutable.\n      // strings, numbers, null, and undefined are all naturally immutable.\n      return true;\n    }\n  }\n\n  function isEqual(a, b) {\n    // Avoid false positives due to (NaN !== NaN) evaluating to true\n    return (a === b || (a !== a && b !== b));\n  }\n\n  function isMergableObject(target) {\n    return target !== null && typeof target === \"object\" && !(Array.isArray(target)) && !(target instanceof Date);\n  }\n\n  var mutatingObjectMethods = [\n    \"setPrototypeOf\"\n  ];\n\n  var nonMutatingObjectMethods = [\n    \"keys\"\n  ];\n\n  var mutatingArrayMethods = mutatingObjectMethods.concat([\n    \"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"\n  ]);\n\n  var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\n    \"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"\n  ]);\n\n  var mutatingDateMethods = mutatingObjectMethods.concat([\n    \"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\",\n    \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\",\n    \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"\n  ]);\n\n  function ImmutableError(message) {\n    var err       = new Error(message);\n    // TODO: Consider `Object.setPrototypeOf(err, ImmutableError);`\n    err.__proto__ = ImmutableError;\n\n    return err;\n  }\n  ImmutableError.prototype = Error.prototype;\n\n  function makeImmutable(obj, bannedMethods) {\n    // Tag it so we can quickly tell it's immutable later.\n    addImmutabilityTag(obj);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      // Make all mutating methods throw exceptions.\n      for (var index in bannedMethods) {\n        if (bannedMethods.hasOwnProperty(index)) {\n          banProperty(obj, bannedMethods[index]);\n        }\n      }\n\n      // Freeze it and return it.\n      Object.freeze(obj);\n    }\n\n    return obj;\n  }\n\n  function makeMethodReturnImmutable(obj, methodName) {\n    var currentMethod = obj[methodName];\n\n    addPropertyTo(obj, methodName, function() {\n      return Immutable(currentMethod.apply(obj, arguments));\n    });\n  }\n\n  function arraySet(idx, value, config) {\n    var deep          = config && config.deep;\n\n    if (idx in this) {\n      if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\n        value = Immutable.merge(this[idx], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[idx], value)) {\n        return this;\n      }\n    }\n\n    var mutable = asMutableArray.call(this);\n    mutable[idx] = Immutable(value);\n    return makeImmutableArray(mutable);\n  }\n\n  var immutableEmptyArray = Immutable([]);\n\n  function arraySetIn(pth, value, config) {\n    var head = pth[0];\n\n    if (pth.length === 1) {\n      return arraySet.call(this, head, value, config);\n    } else {\n      var tail = pth.slice(1);\n      var thisHead = this[head];\n      var newValue;\n\n      if (typeof(thisHead) === \"object\" && thisHead !== null) {\n        // Might (validly) be object or array\n        newValue = Immutable.setIn(thisHead, tail, value);\n      } else {\n        var nextHead = tail[0];\n        // If the next path part is a number, then we are setting into an array, else an object.\n        if (nextHead !== '' && isFinite(nextHead)) {\n          newValue = arraySetIn.call(immutableEmptyArray, tail, value);\n        } else {\n          newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n        }\n      }\n\n      if (head in this && thisHead === newValue) {\n        return this;\n      }\n\n      var mutable = asMutableArray.call(this);\n      mutable[head] = newValue;\n      return makeImmutableArray(mutable);\n    }\n  }\n\n  function makeImmutableArray(array) {\n    // Don't change their implementations, but wrap these functions to make sure\n    // they always return an immutable value.\n    for (var index in nonMutatingArrayMethods) {\n      if (nonMutatingArrayMethods.hasOwnProperty(index)) {\n        var methodName = nonMutatingArrayMethods[index];\n        makeMethodReturnImmutable(array, methodName);\n      }\n    }\n\n    if (!globalConfig.use_static) {\n      addPropertyTo(array, \"flatMap\",  flatMap);\n      addPropertyTo(array, \"asObject\", asObject);\n      addPropertyTo(array, \"asMutable\", asMutableArray);\n      addPropertyTo(array, \"set\", arraySet);\n      addPropertyTo(array, \"setIn\", arraySetIn);\n      addPropertyTo(array, \"update\", update);\n      addPropertyTo(array, \"updateIn\", updateIn);\n    }\n\n    for(var i = 0, length = array.length; i < length; i++) {\n      array[i] = Immutable(array[i]);\n    }\n\n    return makeImmutable(array, mutatingArrayMethods);\n  }\n\n  function makeImmutableDate(date) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(date, \"asMutable\", asMutableDate);\n    }\n\n    return makeImmutable(date, mutatingDateMethods);\n  }\n\n  function asMutableDate() {\n    return new Date(this.getTime());\n  }\n\n  /**\n   * Effectively performs a map() over the elements in the array, using the\n   * provided iterator, except that whenever the iterator returns an array, that\n   * array's elements are added to the final result instead of the array itself.\n   *\n   * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\n   */\n  function flatMap(iterator) {\n    // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    var result = [],\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var iteratorResult = iterator(this[index], index, this);\n\n      if (Array.isArray(iteratorResult)) {\n        // Concatenate Array results into the return value we're building up.\n        result.push.apply(result, iteratorResult);\n      } else {\n        // Handle non-Array results the same way map() does.\n        result.push(iteratorResult);\n      }\n    }\n\n    return makeImmutableArray(result);\n  }\n\n  /**\n   * Returns an Immutable copy of the object without the given keys included.\n   *\n   * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\n   */\n  function without(remove) {\n    // Calling .without() with no arguments is a no-op. Don't bother cloning.\n    if (typeof remove === \"undefined\" && arguments.length === 0) {\n      return this;\n    }\n\n    if (typeof remove !== \"function\") {\n      // If we weren't given an array, use the arguments list.\n      var keysToRemoveArray = (Array.isArray(remove)) ?\n         remove.slice() : Array.prototype.slice.call(arguments);\n\n      // Convert numeric keys to strings since that's how they'll\n      // come from the enumeration of the object.\n      keysToRemoveArray.forEach(function(el, idx, arr) {\n        if(typeof(el) === \"number\") {\n          arr[idx] = el.toString();\n        }\n      });\n\n      remove = function(val, key) {\n        return keysToRemoveArray.indexOf(key) !== -1;\n      };\n    }\n\n    var result = instantiateEmptyObject(this);\n\n    for (var key in this) {\n      if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\n        result[key] = this[key];\n      }\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asMutableArray(opts) {\n    var result = [], i, length;\n\n    if(opts && opts.deep) {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(asDeepMutable(this[i]));\n      }\n    } else {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(this[i]);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\n   * will return an array of two elements - the first representing a key, the other\n   * a value. Then returns an Immutable Object constructed of those keys and values.\n   *\n   * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\n   */\n  function asObject(iterator) {\n    // If no iterator was provided, assume the identity function\n    // (suggesting this array is already a list of key/value pairs.)\n    if (typeof iterator !== \"function\") {\n      iterator = function(value) { return value; };\n    }\n\n    var result = {},\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var pair  = iterator(this[index], index, this),\n          key   = pair[0],\n          value = pair[1];\n\n      result[key] = value;\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asDeepMutable(obj) {\n    if (\n      (!obj) ||\n      (typeof obj !== 'object') ||\n      (!Object.getOwnPropertyDescriptor(obj, immutabilityTag)) ||\n      (obj instanceof Date)\n    ) { return obj; }\n    return Immutable.asMutable(obj, {deep: true});\n  }\n\n  function quickCopy(src, dest) {\n    for (var key in src) {\n      if (Object.getOwnPropertyDescriptor(src, key)) {\n        dest[key] = src[key];\n      }\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns an Immutable Object containing the properties and values of both\n   * this object and the provided object, prioritizing the provided object's\n   * values whenever the same key is present in both objects.\n   *\n   * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\n   * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\n   *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\n   */\n  function merge(other, config) {\n    // Calling .merge() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (other === null || (typeof other !== \"object\")) {\n      throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\n    }\n\n    var receivedArray = (Array.isArray(other)),\n        deep          = config && config.deep,\n        mode          = config && config.mode || 'merge',\n        merger        = config && config.merger,\n        result;\n\n    // Use the given key to extract a value from the given object, then place\n    // that value in the result object under the same key. If that resulted\n    // in a change from this object's value at that key, set anyChanges = true.\n    function addToResult(currentObj, otherObj, key) {\n      var immutableValue = Immutable(otherObj[key]);\n      var mergerResult = merger && merger(currentObj[key], immutableValue, config);\n      var currentValue = currentObj[key];\n\n      if ((result !== undefined) ||\n        (mergerResult !== undefined) ||\n        (!currentObj.hasOwnProperty(key)) ||\n        !isEqual(immutableValue, currentValue)) {\n\n        var newValue;\n\n        if (mergerResult) {\n          newValue = mergerResult;\n        } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\n          newValue = Immutable.merge(currentValue, immutableValue, config);\n        } else {\n          newValue = immutableValue;\n        }\n\n        if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n\n          result[key] = newValue;\n        }\n      }\n    }\n\n    function clearDroppedKeys(currentObj, otherObj) {\n      for (var key in currentObj) {\n        if (!otherObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n          delete result[key];\n        }\n      }\n    }\n\n    var key;\n\n    // Achieve prioritization by overriding previous values that get in the way.\n    if (!receivedArray) {\n      // The most common use case: just merge one object into the existing one.\n      for (key in other) {\n        if (Object.getOwnPropertyDescriptor(other, key)) {\n          addToResult(this, other, key);\n        }\n      }\n      if (mode === 'replace') {\n        clearDroppedKeys(this, other);\n      }\n    } else {\n      // We also accept an Array\n      for (var index = 0, length = other.length; index < length; index++) {\n        var otherFromArray = other[index];\n\n        for (key in otherFromArray) {\n          if (otherFromArray.hasOwnProperty(key)) {\n            addToResult(result !== undefined ? result : this, otherFromArray, key);\n          }\n        }\n      }\n    }\n\n    if (result === undefined) {\n      return this;\n    } else {\n      return makeImmutableObject(result);\n    }\n  }\n\n  function objectReplace(value, config) {\n    var deep          = config && config.deep;\n\n    // Calling .replace() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (value === null || typeof value !== \"object\") {\n      throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\n    }\n\n    return Immutable.merge(this, value, {deep: deep, mode: 'replace'});\n  }\n\n  var immutableEmptyObject = Immutable({});\n\n  function objectSetIn(path, value, config) {\n    if (!(path instanceof Array) || path.length === 0) {\n      throw new TypeError(\"The first argument to Immutable#setIn must be an array containing at least one \\\"key\\\" string.\");\n    }\n\n    var head = path[0];\n    if (path.length === 1) {\n      return objectSet.call(this, head, value, config);\n    }\n\n    var tail = path.slice(1);\n    var newValue;\n    var thisHead = this[head];\n\n    if (this.hasOwnProperty(head) && typeof(thisHead) === \"object\" && thisHead !== null) {\n      // Might (validly) be object or array\n      newValue = Immutable.setIn(thisHead, tail, value);\n    } else {\n      newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n    }\n\n    if (this.hasOwnProperty(head) && thisHead === newValue) {\n      return this;\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[head] = newValue;\n    return makeImmutableObject(mutable);\n  }\n\n  function objectSet(property, value, config) {\n    var deep          = config && config.deep;\n\n    if (this.hasOwnProperty(property)) {\n      if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\n        value = Immutable.merge(this[property], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[property], value)) {\n        return this;\n      }\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[property] = Immutable(value);\n    return makeImmutableObject(mutable);\n  }\n\n  function update(property, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = this[property];\n    return Immutable.set(this, property, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getInPath(obj, path) {\n    /*jshint eqnull:true */\n    for (var i = 0, l = path.length; obj != null && i < l; i++) {\n      obj = obj[path[i]];\n    }\n\n    return (i && i == l) ? obj : undefined;\n  }\n\n  function updateIn(path, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = getInPath(this, path);\n\n    return Immutable.setIn(this, path, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function asMutableObject(opts) {\n    var result = instantiateEmptyObject(this), key;\n\n    if(opts && opts.deep) {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = asDeepMutable(this[key]);\n        }\n      }\n    } else {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = this[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  // Creates plain object to be used for cloning\n  function instantiatePlainObject() {\n    return {};\n  }\n\n  // Finalizes an object with immutable methods, freezes it, and returns it.\n  function makeImmutableObject(obj) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(obj, \"merge\", merge);\n      addPropertyTo(obj, \"replace\", objectReplace);\n      addPropertyTo(obj, \"without\", without);\n      addPropertyTo(obj, \"asMutable\", asMutableObject);\n      addPropertyTo(obj, \"set\", objectSet);\n      addPropertyTo(obj, \"setIn\", objectSetIn);\n      addPropertyTo(obj, \"update\", update);\n      addPropertyTo(obj, \"updateIn\", updateIn);\n    }\n\n    return makeImmutable(obj, mutatingObjectMethods);\n  }\n\n  // Returns true if object is a valid react element\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\n  function isReactElement(obj) {\n    return typeof obj === 'object' &&\n           obj !== null &&\n           (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\n  }\n\n  function isFileObject(obj) {\n    return typeof File !== 'undefined' &&\n           obj instanceof File;\n  }\n\n  function Immutable(obj, options, stackRemaining) {\n    if (isImmutable(obj) || isReactElement(obj) || isFileObject(obj)) {\n      return obj;\n    } else if (Array.isArray(obj)) {\n      return makeImmutableArray(obj.slice());\n    } else if (obj instanceof Date) {\n      return makeImmutableDate(new Date(obj.getTime()));\n    } else {\n      // Don't freeze the object we were given; make a clone and use that.\n      var prototype = options && options.prototype;\n      var instantiateEmptyObject =\n        (!prototype || prototype === Object.prototype) ?\n          instantiatePlainObject : (function() { return Object.create(prototype); });\n      var clone = instantiateEmptyObject();\n\n      if (process.env.NODE_ENV !== \"production\") {\n        /*jshint eqnull:true */\n        if (stackRemaining == null) {\n          stackRemaining = 64;\n        }\n        if (stackRemaining <= 0) {\n          throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" +\n            \" Have you tried to wrap an object with circular references (e.g. React element)?\" +\n            \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\n        }\n        stackRemaining -= 1;\n      }\n\n      for (var key in obj) {\n        if (Object.getOwnPropertyDescriptor(obj, key)) {\n          clone[key] = Immutable(obj[key], undefined, stackRemaining);\n        }\n      }\n\n      return makeImmutableObject(clone);\n    }\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  function toStatic(fn) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      return fn.apply(self, args);\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object.\n  function toStaticObjectOrArray(fnObject, fnArray) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object or a date.\n  function toStaticObjectOrDateOrArray(fnObject, fnArray, fnDate) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else if (self instanceof Date) {\n          return fnDate.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Export the library\n  Immutable.from           = Immutable;\n  Immutable.isImmutable    = isImmutable;\n  Immutable.ImmutableError = ImmutableError;\n  Immutable.merge          = toStatic(merge);\n  Immutable.replace        = toStatic(objectReplace);\n  Immutable.without        = toStatic(without);\n  Immutable.asMutable      = toStaticObjectOrDateOrArray(asMutableObject, asMutableArray, asMutableDate);\n  Immutable.set            = toStaticObjectOrArray(objectSet, arraySet);\n  Immutable.setIn          = toStaticObjectOrArray(objectSetIn, arraySetIn);\n  Immutable.update         = toStatic(update);\n  Immutable.updateIn       = toStatic(updateIn);\n  Immutable.flatMap        = toStatic(flatMap);\n  Immutable.asObject       = toStatic(asObject);\n  if (!globalConfig.use_static) {\n      Immutable.static = immutableInit({\n          use_static: true\n      });\n  }\n\n  Object.freeze(Immutable);\n\n  return Immutable;\n}\n\n  var Immutable = immutableInit();\n  /* istanbul ignore if */\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return Immutable;\n    });\n  } else if (typeof module === \"object\") {\n    module.exports = Immutable;\n  } else if (typeof exports === \"object\") {\n    exports.Immutable = Immutable;\n  } else if (typeof window === \"object\") {\n    window.Immutable = Immutable;\n  } else if (typeof global === \"object\") {\n    global.Immutable = Immutable;\n  }\n})();\n","/* eslint-disable new-cap */\nimport Immutable from \"seamless-immutable\";\n\n// This middleware will just add the property \"async dispatch\"\n// to actions with the \"async\" propperty set to true\nconst asyncDispatchMiddleware = store => next => action => {\n  let syncActivityFinished = false;\n  let actionQueue = [];\n\n  function flushQueue() {\n    actionQueue.forEach(a => store.dispatch(a)); // flush queue\n    actionQueue = [];\n  }\n\n  function asyncDispatch(asyncAction) {\n    actionQueue = actionQueue.concat([asyncAction]);\n\n    if (syncActivityFinished) {\n      flushQueue();\n    }\n  }\n\n  const actionWithAsyncDispatch =\n      Immutable(action).merge({ asyncDispatch });\n\n  next(actionWithAsyncDispatch);\n  syncActivityFinished = true;\n  flushQueue();\n};\n\nexport default asyncDispatchMiddleware;\n","/* eslint-env jasmine */\nimport asyncDispatchMiddleware from \"../js/utils/asyncDispatchMiddleware\";\n\nconst fakeAction = { type: \"fake action\" };\n\ndescribe(\"The asyncDispatchMiddleware\", () => {\n  it(\"calls next with asyncDispatch property\", (done) => {\n    const next = returnedAction => {\n      expect(returnedAction.asyncDispatch).not.toEqual(undefined);\n      expect(typeof returnedAction.asyncDispatch).toEqual(\"function\");\n      done();\n    };\n\n    asyncDispatchMiddleware(\"fakeStore\")(next)(fakeAction);\n  });\n\n\n  it(\"asyncDispatch triggers a store dispatch\", (done) => {\n    const fakeAsyncAction = { type: \"fakeAsyncAction\" };\n\n    const fakeStore = {\n      dispatch: action => {\n        expect(action.type).toEqual(fakeAsyncAction.type);\n        done();\n      },\n    };\n\n    const next = returnedAction =>\n      returnedAction.asyncDispatch(fakeAsyncAction);\n\n    asyncDispatchMiddleware(fakeStore)(next)(fakeAction);\n  });\n});\n","// Bug checking function that will throw an error whenever\n// the condition sent to it is evaluated to false\n/**\n * Processes the message and outputs the correct message if the condition\n * is false. Otherwise it outputs null.\n * @api private\n * @method processCondition\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return {String | null}  - Error message if there is an error, nul otherwise.\n */\nfunction processCondition(condition, errorMessage) {\n  if (!condition) {\n    var completeErrorMessage = '';\n    var re = /at ([^\\s]+)\\s\\(/g;\n    var stackTrace = new Error().stack;\n    var stackFunctions = [];\n\n    var funcName = re.exec(stackTrace);\n    while (funcName && funcName[1]) {\n      stackFunctions.push(funcName[1]);\n      funcName = re.exec(stackTrace);\n    }\n\n    // Number 0 is processCondition itself,\n    // Number 1 is assert,\n    // Number 2 is the caller function.\n    if (stackFunctions[2]) {\n      completeErrorMessage = stackFunctions[2] + ': ' + completeErrorMessage;\n    }\n\n    completeErrorMessage += errorMessage;\n    return completeErrorMessage;\n  }\n\n  return null;\n}\n\n/**\n * Throws an error if the boolean passed to it evaluates to false.\n * To be used like this:\n * \t\tassert(myDate !== undefined, \"Date cannot be undefined.\");\n * @api public\n * @method assert\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return void\n */\nfunction assert(condition, errorMessage) {\n  var error = processCondition(condition, errorMessage);\n  if (typeof error === 'string') {\n    throw new Error(error);\n  }\n}\n\n/**\n * Logs a warning if the boolean passed to it evaluates to false.\n * To be used like this:\n * \t\tassert.warn(myDate !== undefined, \"No date provided.\");\n * @api public\n * @method warn\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return void\n */\nassert.warn = function warn(condition, errorMessage) {\n  var error = processCondition(condition, errorMessage);\n  if (typeof error === 'string') {\n    console.warn(error);\n  }\n};\n\nexport default assert;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJhc3NlcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQnVnIGNoZWNraW5nIGZ1bmN0aW9uIHRoYXQgd2lsbCB0aHJvdyBhbiBlcnJvciB3aGVuZXZlclxuLy8gdGhlIGNvbmRpdGlvbiBzZW50IHRvIGl0IGlzIGV2YWx1YXRlZCB0byBmYWxzZVxuLyoqXG4gKiBQcm9jZXNzZXMgdGhlIG1lc3NhZ2UgYW5kIG91dHB1dHMgdGhlIGNvcnJlY3QgbWVzc2FnZSBpZiB0aGUgY29uZGl0aW9uXG4gKiBpcyBmYWxzZS4gT3RoZXJ3aXNlIGl0IG91dHB1dHMgbnVsbC5cbiAqIEBhcGkgcHJpdmF0ZVxuICogQG1ldGhvZCBwcm9jZXNzQ29uZGl0aW9uXG4gKiBAcGFyYW0gIHtCb29sZWFufSBjb25kaXRpb24gLSBSZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBjb25kaXRpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gZXJyb3JNZXNzYWdlIC0gTWVzc2FnZSBleHBsYWluaWcgdGhlIGVycm9yIGluIGNhc2UgaXQgaXMgdGhyb3duXG4gKiBAcmV0dXJuIHtTdHJpbmcgfCBudWxsfSAgLSBFcnJvciBtZXNzYWdlIGlmIHRoZXJlIGlzIGFuIGVycm9yLCBudWwgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBwcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgbGV0IGNvbXBsZXRlRXJyb3JNZXNzYWdlID0gJyc7XG4gICAgY29uc3QgcmUgPSAvYXQgKFteXFxzXSspXFxzXFwoL2c7XG4gICAgY29uc3Qgc3RhY2tUcmFjZSA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIGNvbnN0IHN0YWNrRnVuY3Rpb25zID0gW107XG5cbiAgICBsZXQgZnVuY05hbWUgPSByZS5leGVjKHN0YWNrVHJhY2UpO1xuICAgIHdoaWxlIChmdW5jTmFtZSAmJiBmdW5jTmFtZVsxXSkge1xuICAgICAgc3RhY2tGdW5jdGlvbnMucHVzaChmdW5jTmFtZVsxXSk7XG4gICAgICBmdW5jTmFtZSA9IHJlLmV4ZWMoc3RhY2tUcmFjZSk7XG4gICAgfVxuXG4gICAgLy8gTnVtYmVyIDAgaXMgcHJvY2Vzc0NvbmRpdGlvbiBpdHNlbGYsXG4gICAgLy8gTnVtYmVyIDEgaXMgYXNzZXJ0LFxuICAgIC8vIE51bWJlciAyIGlzIHRoZSBjYWxsZXIgZnVuY3Rpb24uXG4gICAgaWYgKHN0YWNrRnVuY3Rpb25zWzJdKSB7XG4gICAgICBjb21wbGV0ZUVycm9yTWVzc2FnZSA9IGAke3N0YWNrRnVuY3Rpb25zWzJdfTogJHtjb21wbGV0ZUVycm9yTWVzc2FnZX1gO1xuICAgIH1cblxuICAgIGNvbXBsZXRlRXJyb3JNZXNzYWdlICs9IGVycm9yTWVzc2FnZTtcbiAgICByZXR1cm4gY29tcGxldGVFcnJvck1lc3NhZ2U7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGJvb2xlYW4gcGFzc2VkIHRvIGl0IGV2YWx1YXRlcyB0byBmYWxzZS5cbiAqIFRvIGJlIHVzZWQgbGlrZSB0aGlzOlxuICogXHRcdGFzc2VydChteURhdGUgIT09IHVuZGVmaW5lZCwgXCJEYXRlIGNhbm5vdCBiZSB1bmRlZmluZWQuXCIpO1xuICogQGFwaSBwdWJsaWNcbiAqIEBtZXRob2QgYXNzZXJ0XG4gKiBAcGFyYW0gIHtCb29sZWFufSBjb25kaXRpb24gLSBSZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBjb25kaXRpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gZXJyb3JNZXNzYWdlIC0gTWVzc2FnZSBleHBsYWluaWcgdGhlIGVycm9yIGluIGNhc2UgaXQgaXMgdGhyb3duXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKSB7XG4gIGNvbnN0IGVycm9yID0gcHJvY2Vzc0NvbmRpdGlvbihjb25kaXRpb24sIGVycm9yTWVzc2FnZSk7XG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nIGlmIHRoZSBib29sZWFuIHBhc3NlZCB0byBpdCBldmFsdWF0ZXMgdG8gZmFsc2UuXG4gKiBUbyBiZSB1c2VkIGxpa2UgdGhpczpcbiAqIFx0XHRhc3NlcnQud2FybihteURhdGUgIT09IHVuZGVmaW5lZCwgXCJObyBkYXRlIHByb3ZpZGVkLlwiKTtcbiAqIEBhcGkgcHVibGljXG4gKiBAbWV0aG9kIHdhcm5cbiAqIEBwYXJhbSAge0Jvb2xlYW59IGNvbmRpdGlvbiAtIFJlc3VsdCBvZiB0aGUgZXZhbHVhdGVkIGNvbmRpdGlvblxuICogQHBhcmFtICB7U3RyaW5nfSBlcnJvck1lc3NhZ2UgLSBNZXNzYWdlIGV4cGxhaW5pZyB0aGUgZXJyb3IgaW4gY2FzZSBpdCBpcyB0aHJvd25cbiAqIEByZXR1cm4gdm9pZFxuICovXG5hc3NlcnQud2FybiA9IGZ1bmN0aW9uIHdhcm4oY29uZGl0aW9uLCBlcnJvck1lc3NhZ2UpIHtcbiAgY29uc3QgZXJyb3IgPSBwcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKTtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4iXSwiZmlsZSI6ImFzc2VydC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9\n","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nmodule.exports = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n","/**\n * An optimized, private array `slice` implementation.\n *\n * @private\n * @param {Arguments|Array} args The array or arguments object to consider.\n * @param {Number} [from=0] The array index to slice from, inclusive.\n * @param {Number} [to=args.length] The array index to slice to, exclusive.\n * @return {Array} A new, sliced array.\n * @example\n *\n *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n *\n *      var firstThreeArgs = function(a, b, c, d) {\n *        return _slice(arguments, 0, 3);\n *      };\n *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n */\nmodule.exports = function _slice(args, from, to) {\n  switch (arguments.length) {\n    case 1: return _slice(args, 0, args.length);\n    case 2: return _slice(args, from, args.length);\n    default:\n      var list = [];\n      var idx = 0;\n      var len = Math.max(0, Math.min(args.length, to) - from);\n      while (idx < len) {\n        list[idx] = args[from + idx];\n        idx += 1;\n      }\n      return list;\n  }\n};\n","var _isArray = require('./_isArray');\nvar _slice = require('./_slice');\n\n\n/**\n * Similar to hasMethod, this checks whether a function has a [methodname]\n * function. If it isn't an array it will execute that function otherwise it\n * will default to the ramda implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nmodule.exports = function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n  };\n};\n","module.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n","var _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n","var _curry1 = require('./_curry1');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n","var _curry1 = require('./_curry1');\nvar _curry2 = require('./_curry2');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n};\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nmodule.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nmodule.exports = (function() {\n  // `Identity` is a functor that holds a single value, where `map` simply\n  // transforms the held value with the provided function.\n  var Identity = function(x) {\n    return {value: x, map: function(f) { return Identity(f(x)); }};\n  };\n\n  return _curry3(function over(lens, f, x) {\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    return lens(function(y) { return Identity(f(y)); })(x).value;\n  });\n}());\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nmodule.exports = _curry1(function always(val) {\n  return function() {\n    return val;\n  };\n});\n","var _curry3 = require('./internal/_curry3');\nvar always = require('./always');\nvar over = require('./over');\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nmodule.exports = _curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\n","module.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n","module.exports = function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n};\n","module.exports = (function() {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function() {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\n  XWrap.prototype['@@transducer/step'] = function(acc, x) {\n    return this.f(acc, x);\n  };\n\n  return function _xwrap(fn) { return new XWrap(fn); };\n}());\n","var _arity = require('./internal/_arity');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n */\nmodule.exports = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n","module.exports = function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n};\n","var _curry1 = require('./internal/_curry1');\nvar _isArray = require('./internal/_isArray');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      R.isArrayLike([]); //=> true\n *      R.isArrayLike(true); //=> false\n *      R.isArrayLike({}); //=> false\n *      R.isArrayLike({length: 10}); //=> false\n *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nmodule.exports = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n","var _xwrap = require('./_xwrap');\nvar bind = require('../bind');\nvar isArrayLike = require('../isArrayLike');\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj) {\n    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list);\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n","var _curry3 = require('./internal/_curry3');\nvar _reduce = require('./internal/_reduce');\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * `R.reduced` to shortcut the iteration.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex\n * @example\n *\n *      var numbers = [1, 2, 3];\n *      var plus = (a, b) => a + b;\n *\n *      R.reduce(plus, 10, numbers); //=> 16\n */\nmodule.exports = _curry3(_reduce);\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar slice = require('./slice');\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nmodule.exports = _checkForMethod('tail', slice(1, Infinity));\n","var _arity = require('./internal/_arity');\nvar _pipe = require('./internal/_pipe');\nvar reduce = require('./reduce');\nvar tail = require('./tail');\n\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n */\nmodule.exports = function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n};\n","/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nmodule.exports = function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n};\n","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nmodule.exports = _curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\nmodule.exports = _curry2(function prop(p, obj) { return obj[p]; });\n","module.exports = function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n};\n","var _isArray = require('./_isArray');\nvar _isTransformer = require('./_isTransformer');\nvar _slice = require('./_slice');\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with [methodname], it will execute that\n * function (functor case). Otherwise, if it is a transformer, uses transducer\n * [xf] to return a new transformer (transducer case). Otherwise, it will\n * default to executing [fn].\n *\n * @private\n * @param {String} methodname property to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nmodule.exports = function _dispatchable(methodname, xf, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    if (!_isArray(obj)) {\n      var args = _slice(arguments, 0, length - 1);\n      if (typeof obj[methodname] === 'function') {\n        return obj[methodname].apply(obj, args);\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n};\n","module.exports = function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n};\n","module.exports = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function(result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n}());\n","var _arity = require('./_arity');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar _curry2 = require('./internal/_curry2');\nvar _curryN = require('./internal/_curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n","module.exports = function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","var _has = require('./_has');\n\n\nmodule.exports = (function() {\n  var toString = Object.prototype.toString;\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar _isArguments = require('./internal/_isArguments');\n\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nmodule.exports = (function() {\n  // cover IE < 9 keys issues\n  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  // Safari bug\n  var hasArgsEnumBug = (function() {\n    'use strict';\n    return arguments.propertyIsEnumerable('length');\n  }());\n\n  var contains = function contains(list, item) {\n    var idx = 0;\n    while (idx < list.length) {\n      if (list[idx] === item) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  };\n\n  return typeof Object.keys === 'function' && !hasArgsEnumBug ?\n    _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) :\n    _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n      var prop, nIdx;\n      var ks = [];\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n          nIdx -= 1;\n        }\n      }\n      return ks;\n    });\n}());\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _map = require('./internal/_map');\nvar _reduce = require('./internal/_reduce');\nvar _xmap = require('./internal/_xmap');\nvar curryN = require('./curryN');\nvar keys = require('./keys');\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n */\nmodule.exports = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n","var _curry2 = require('./internal/_curry2');\nvar map = require('./map');\n\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nmodule.exports = _curry2(function lens(getter, setter) {\n  return function(toFunctorFn) {\n    return function(target) {\n      return map(\n        function(focus) {\n          return setter(focus, target);\n        },\n        toFunctorFn(getter(target))\n      );\n    };\n  };\n});\n","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n","/* eslint-disable new-cap */\n\nimport Immutable from \"seamless-immutable\";\nimport { curry, lens, prop, prepend, over, set, pipe } from \"ramda\";\n\nexport const updateAt = curry((keyArray, newVal, obj) => {\n  const deepNewVal = keyArray.reduceRight(\n    (result, key) => ({ [key]: result })\n    , newVal\n  );\n\n  return Immutable(obj).merge(deepNewVal, { deep: true });\n});\n\n// State lenses\nexport const StateLenses = {\n  fieldTypes: lens(prop(\"fieldTypes\"), updateAt([\"fieldTypes\"])),\n  fieldsState: lens(prop(\"fieldsState\"), updateAt([\"fieldsState\"])),\n  fieldsStateHistory: lens(prop(\"fieldsStateHistory\"), updateAt([\"fieldsStateHistory\"])),\n};\n\n// _ => String\nexport const createId = _ =>\n  Date.now().toString();\n\n// State -> [fieldsState] -> State\nexport const pushHistoryState = curry((state, newHistoryState) => pipe(\n  // Add current state to history\n  over(StateLenses.fieldsStateHistory, prepend(state.fieldsState)),\n  // Make new State the current\n  set(StateLenses.fieldsState, newHistoryState)\n)(state));\n\n\n// State -> State\nexport const hideConfigs = state =>\n  set(\n    StateLenses.fieldsState,\n    state.fieldsState.map(s => Object.assign(s, { configShowing: false })),\n    state\n  );\n","import { StateLenses } from \"./utils\";\nimport { set, over, slice, pipe } from \"ramda\";\n\nconst lastHistoryState = state =>\n  state.fieldsStateHistory[0] || [];\n\nconst undo = (state, _) => pipe(\n  // Make last history last state the current one\n  set(StateLenses.fieldsState, lastHistoryState(state)),\n  // Remove last history state from the history array\n  over(StateLenses.fieldsStateHistory, slice(1, Infinity))\n)(state);\n\nexport default undo;\n","module.exports = function _identity(x) { return x; };\n","var _curry1 = require('./internal/_curry1');\nvar _identity = require('./internal/_identity');\n\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n */\nmodule.exports = _curry1(_identity);\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig [String] -> {k: v} -> v | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nmodule.exports = _curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\n","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\nvar _reduce = require('./internal/_reduce');\nvar map = require('./map');\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @param {Array} fns An array of functions\n * @param {Array} vs An array of values\n * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n */\nmodule.exports = _curry2(function ap(applicative, fn) {\n  return (\n    typeof applicative.ap === 'function' ?\n      applicative.ap(fn) :\n    typeof applicative === 'function' ?\n      function(x) { return applicative(x)(fn(x)); } :\n    // else\n      _reduce(function(acc, f) { return _concat(acc, map(f, fn)); }, [], applicative)\n  );\n});\n","var _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to `reduce`, except moves through the input list from the right to\n * the left.\n *\n * The iterator function receives two values: *(acc, value)*\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a,b -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex\n * @example\n *\n *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n *      var flattenPairs = (acc, pair) => acc.concat(pair);\n *\n *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n */\nmodule.exports = _curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(acc, list[idx]);\n    idx -= 1;\n  }\n  return acc;\n});\n","var _curry2 = require('./internal/_curry2');\nvar ap = require('./ap');\nvar map = require('./map');\nvar prepend = require('./prepend');\nvar reduceRight = require('./reduceRight');\n\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Function} of\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n */\nmodule.exports = _curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ?\n    traversable.sequence(of) :\n    reduceRight(function(acc, x) { return ap(map(prepend, x), acc); },\n                of([]),\n                traversable);\n});\n","var _curry3 = require('./internal/_curry3');\nvar map = require('./map');\nvar sequence = require('./sequence');\n\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n * @param {Function} of\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Nothing` if the given divisor is `0`\n *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n */\nmodule.exports = _curry3(function traverse(of, f, traversable) {\n  return sequence(of, map(f, traversable));\n});\n","module.exports = function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n};\n","module.exports = function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n};\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nmodule.exports = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n */\nmodule.exports = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n","var _arrayFromIterator = require('./_arrayFromIterator');\nvar _functionName = require('./_functionName');\nvar _has = require('./_has');\nvar identical = require('../identical');\nvar keys = require('../keys');\nvar type = require('../type');\n\n\nmodule.exports = function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  if (type(a) !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n           typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (type(a)) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n          _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n            a.global === b.global &&\n            a.ignoreCase === b.ignoreCase &&\n            a.multiline === b.multiline &&\n            a.sticky === b.sticky &&\n            a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n    case 'Map':\n    case 'Set':\n      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n        return false;\n      }\n      break;\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n      break;\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  stackA.push(a);\n  stackB.push(b);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  stackA.pop();\n  stackB.pop();\n  return true;\n};\n","var _curry2 = require('./internal/_curry2');\nvar _equals = require('./internal/_equals');\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nmodule.exports = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n","// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module lib/either\n */\nmodule.exports = Either\n\n// -- Aliases ----------------------------------------------------------\nvar clone         = Object.create\nvar unimplemented = function(){ throw new Error('Not implemented.') }\nvar noop          = function(){ return this                         }\n\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * The `Either(a, b)` structure represents the logical disjunction between `a`\n * and `b`. In other words, `Either` may contain either a value of type `a` or\n * a value of type `b`, at any given time. This particular implementation is\n * biased on the right value (`b`), thus projections will take the right value\n * over the left one.\n *\n * This class models two different cases: `Left a` and `Right b`, and can hold\n * one of the cases at any given time. The projections are, none the less,\n * biased for the `Right` case, thus a common use case for this structure is to\n * hold the results of computations that may fail, when you want to store\n * additional information on the failure (instead of throwing an exception).\n *\n * Furthermore, the values of `Either(a, b)` can be combined and manipulated by\n * using the expressive monadic operations. This allows safely sequencing\n * operations that may fail, and safely composing values that you don't know\n * whether they're present or not, failing early (returning a `Left a`) if any\n * of the operations fail.\n *\n * While this class can certainly model input validations, the [Validation][]\n * structure lends itself better to that use case, since it can naturally\n * aggregate failures — monads shortcut on the first failure.\n *\n * [Validation]: https://github.com/folktale/data.validation\n *\n *\n * @class\n * @summary\n * Either[α, β] <: Applicative[β]\n *               , Functor[β]\n *               , Chain[β]\n *               , Show\n *               , Eq\n */\nfunction Either() { }\n\nLeft.prototype = clone(Either.prototype)\nfunction Left(a) {\n  this.value = a\n}\n\nRight.prototype = clone(Either.prototype)\nfunction Right(a) {\n  this.value = a\n}\n\n// -- Constructors -----------------------------------------------------\n\n/**\n * Constructs a new `Either[α, β]` structure holding a `Left` value. This\n * usually represents a failure due to the right-bias of this structure.\n *\n * @summary a → Either[α, β]\n */\nEither.Left = function(a) {\n  return new Left(a)\n}\nEither.prototype.Left = Either.Left\n\n/**\n * Constructs a new `Either[α, β]` structure holding a `Right` value. This\n * usually represents a successful value due to the right bias of this\n * structure.\n *\n * @summary β → Either[α, β]\n */\nEither.Right = function(a) {\n  return new Right(a)\n}\nEither.prototype.Right = Either.Right\n\n\n// -- Conversions ------------------------------------------------------\n\n/**\n * Constructs a new `Either[α, β]` structure from a nullable type.\n *\n * Takes the `Left` case if the value is `null` or `undefined`. Takes the\n * `Right` case otherwise.\n *\n * @summary α → Either[α, α]\n */\nEither.fromNullable = function(a) {\n  return a != null?       new Right(a)\n  :      /* otherwise */  new Left(a)\n}\nEither.prototype.fromNullable = Either.fromNullable\n\n/**\n * Constructs a new `Either[α, β]` structure from a `Validation[α, β]` type.\n *\n * @summary Validation[α, β] → Either[α, β]\n */\nEither.fromValidation = function(a) {\n  return a.fold(Either.Left, Either.Right)\n}\n\n/**\n * Executes a synchronous computation that may throw and converts it to an\n * Either type.\n *\n * @summary (α₁, α₂, ..., αₙ -> β :: throws γ) -> (α₁, α₂, ..., αₙ -> Either[γ, β])\n */\nEither.try = function(f) {\n  return function() {\n    try {\n      return new Right(f.apply(null, arguments))\n    } catch(e) {\n      return new Left(e)\n    }\n  }\n}\n\n\n// -- Predicates -------------------------------------------------------\n\n/**\n * True if the `Either[α, β]` contains a `Left` value.\n *\n * @summary Boolean\n */\nEither.prototype.isLeft = false\nLeft.prototype.isLeft   = true\n\n/**\n * True if the `Either[α, β]` contains a `Right` value.\n *\n * @summary Boolean\n */\nEither.prototype.isRight = false\nRight.prototype.isRight  = true\n\n\n// -- Applicative ------------------------------------------------------\n\n/**\n * Creates a new `Either[α, β]` instance holding the `Right` value `b`.\n *\n * `b` can be any value, including `null`, `undefined` or another\n * `Either[α, β]` structure.\n *\n * @summary β → Either[α, β]\n */\nEither.of = function(a) {\n  return new Right(a)\n}\nEither.prototype.of = Either.of\n\n\n/**\n * Applies the function inside the `Right` case of the `Either[α, β]` structure\n * to another applicative type.\n *\n * The `Either[α, β]` should contain a function value, otherwise a `TypeError`\n * is thrown.\n *\n * @method\n * @summary (@Either[α, β → γ], f:Applicative[_]) => f[β] → f[γ]\n */\nEither.prototype.ap = unimplemented\n\nLeft.prototype.ap = function(b) {\n  return this\n}\n\nRight.prototype.ap = function(b) {\n  return b.map(this.value)\n}\n\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the `Right` value of the `Either[α, β]` structure using a regular\n * unary function.\n *\n * @method\n * @summary (@Either[α, β]) => (β → γ) → Either[α, γ]\n */\nEither.prototype.map = unimplemented\nLeft.prototype.map   = noop\n\nRight.prototype.map = function(f) {\n  return this.of(f(this.value))\n}\n\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the `Right` value of the `Either[α, β]` structure using an unary\n * function to monads.\n *\n * @method\n * @summary (@Either[α, β], m:Monad[_]) => (β → m[γ]) → m[γ]\n */\nEither.prototype.chain = unimplemented\nLeft.prototype.chain   = noop\n\nRight.prototype.chain = function(f) {\n  return f(this.value)\n}\n\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Either[α, β]` structure.\n *\n * @method\n * @summary (@Either[α, β]) => Void → String\n */\nEither.prototype.toString = unimplemented\n\nLeft.prototype.toString = function() {\n  return 'Either.Left(' + this.value + ')'\n}\n\nRight.prototype.toString = function() {\n  return 'Either.Right(' + this.value + ')'\n}\n\n\n// -- Eq ---------------------------------------------------------------\n\n/**\n * Tests if an `Either[α, β]` structure is equal to another `Either[α, β]`\n * structure.\n *\n * @method\n * @summary (@Either[α, β]) => Either[α, β] → Boolean\n */\nEither.prototype.isEqual = unimplemented\n\nLeft.prototype.isEqual = function(a) {\n  return a.isLeft && (a.value === this.value)\n}\n\nRight.prototype.isEqual = function(a) {\n  return a.isRight && (a.value === this.value)\n}\n\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Extracts the `Right` value out of the `Either[α, β]` structure, if it\n * exists. Otherwise throws a `TypeError`.\n *\n * @method\n * @summary (@Either[α, β]) => Void → β         :: partial, throws\n * @see {@link module:lib/either~Either#getOrElse} — A getter that can handle failures.\n * @see {@link module:lib/either~Either#merge} — The convergence of both values.\n * @throws {TypeError} if the structure has no `Right` value.\n */\nEither.prototype.get = unimplemented\n\nLeft.prototype.get = function() {\n  throw new TypeError(\"Can't extract the value of a Left(a).\")\n}\n\nRight.prototype.get = function() {\n  return this.value\n}\n\n\n/**\n * Extracts the `Right` value out of the `Either[α, β]` structure. If the\n * structure doesn't have a `Right` value, returns the given default.\n *\n * @method\n * @summary (@Either[α, β]) => β → β\n */\nEither.prototype.getOrElse = unimplemented\n\nLeft.prototype.getOrElse = function(a) {\n  return a\n}\n\nRight.prototype.getOrElse = function(_) {\n  return this.value\n}\n\n\n/**\n * Transforms a `Left` value into a new `Either[α, β]` structure. Does nothing\n * if the structure contain a `Right` value.\n *\n * @method\n * @summary (@Either[α, β]) => (α → Either[γ, β]) → Either[γ, β]\n */\nEither.prototype.orElse = unimplemented\nRight.prototype.orElse  = noop\n\nLeft.prototype.orElse = function(f) {\n  return f(this.value)\n}\n\n\n/**\n * Returns the value of whichever side of the disjunction that is present.\n *\n * @summary (@Either[α, α]) => Void → α\n */\nEither.prototype.merge = function() {\n  return this.value\n}\n\n\n// -- Folds and Extended Transformations -------------------------------\n\n/**\n * Applies a function to each case in this data structure.\n *\n * @method\n * @summary (@Either[α, β]) => (α → γ), (β → γ) → γ\n */\nEither.prototype.fold = unimplemented\n\nLeft.prototype.fold = function(f, _) {\n  return f(this.value)\n}\n\nRight.prototype.fold = function(_, g) {\n  return g(this.value)\n}\n\n/**\n * Catamorphism.\n * \n * @method\n * @summary (@Either[α, β]) => { Left: α → γ, Right: β → γ } → γ\n */\nEither.prototype.cata = unimplemented\n\nLeft.prototype.cata = function(pattern) {\n  return pattern.Left(this.value)\n}\n\nRight.prototype.cata = function(pattern) {\n  return pattern.Right(this.value)\n}\n\n\n/**\n * Swaps the disjunction values.\n *\n * @method\n * @summary (@Either[α, β]) => Void → Either[β, α]\n */\nEither.prototype.swap = unimplemented\n\nLeft.prototype.swap = function() {\n  return this.Right(this.value)\n}\n\nRight.prototype.swap = function() {\n  return this.Left(this.value)\n}\n\n\n/**\n * Maps both sides of the disjunction.\n *\n * @method\n * @summary (@Either[α, β]) => (α → γ), (β → δ) → Either[γ, δ]\n */\nEither.prototype.bimap = unimplemented\n\nLeft.prototype.bimap = function(f, _) {\n  return this.Left(f(this.value))\n}\n\nRight.prototype.bimap = function(_, g) {\n  return this.Right(g(this.value))\n}\n\n\n/**\n * Maps the left side of the disjunction.\n *\n * @method\n * @summary (@Either[α, β]) => (α → γ) → Either[γ, β]\n */\nEither.prototype.leftMap = unimplemented\nRight.prototype.leftMap  = noop\n\nLeft.prototype.leftMap = function(f) {\n  return this.Left(f(this.value))\n}\n","// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = require('./either')","/* @flow weak */\n/* eslint-disable new-cap */\nimport { pushHistoryState, createId } from \"./utils\";\nimport { curry, equals, traverse, identity, path } from \"ramda\";\nimport Either from \"data.either\";\n\n// [a] => Either String [a]\nconst isArray = arr =>\n  Array.isArray(arr)\n    ? Either.Right(arr)\n    : Either.Left(`Invalid states sent with importState. Expected Array but received ${typeof arr}`); // eslint-disable-line max-len\n\nconst fieldTypeIsValid = curry((validTypes, field) =>\n  validTypes.find(equals(field.type))\n    ? Either.Right(field)\n    : Either.Left(`Invalid field type ${field.type}`)\n);\n\nconst validFieldTypes = curry((validTypes, fieldsState) =>\n  traverse(Either.of, fieldTypeIsValid(validTypes), fieldsState)\n);\n\n\n// [a] -> [a] -> Either String [a]\nconst validateFieldsState = curry((fieldsState, state) =>\n  Either.of(fieldsState)\n    .chain(isArray)\n    .chain(validFieldTypes(state.fieldTypes.map(path([\"info\",\"type\"]))))\n);\n\n\n// Add required properties that are not managed by the field\n// component but by the FormBuilder component itself, so may\n// not be there.\n// [a] => [a]\nconst addRequiredProperties = fieldStates =>\n  fieldStates\n    .map(s => Object.assign(\n      {\n        configShowing: false,\n        id: createId(),\n        required: false,\n      }, s\n    ));\n\n\n// If there are any problems with the import, the same state\n// will be returned\nexport default (state, { newFieldsState }) =>\n  validateFieldsState(newFieldsState, state)\n    .map(addRequiredProperties)\n    .map(pushHistoryState(state))\n    .bimap(console.error, identity)\n    .getOrElse(state);\n","module.exports = function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x :\n    {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n};\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFind(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.found = false;\n  }\n  XFind.prototype['@@transducer/init'] = _xfBase.init;\n  XFind.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, void 0);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFind.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, input));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfind(f, xf) { return new XFind(f, xf); });\n}());\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfind = require('./internal/_xfind');\n\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\n","'use strict';\n\n\n/**\n * A helper for delaying the execution of a function.\n * @private\n * @summary (Any... -> Any) -> Void\n */\nvar delayed = typeof setImmediate !== 'undefined'?  setImmediate\n            : typeof process !== 'undefined'?       process.nextTick\n            : /* otherwise */                       setTimeout\n\n/**\n * @module lib/task\n */\nmodule.exports = Task;\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * The `Task[α, β]` structure represents values that depend on time. This\n * allows one to model time-based effects explicitly, such that one can have\n * full knowledge of when they're dealing with delayed computations, latency,\n * or anything that can not be computed immediately.\n *\n * A common use for this structure is to replace the usual Continuation-Passing\n * Style form of programming, in order to be able to compose and sequence\n * time-dependent effects using the generic and powerful monadic operations.\n *\n * @class\n * @summary\n * ((α → Void), (β → Void) → Void), (Void → Void) → Task[α, β]\n *\n * Task[α, β] <: Chain[β]\n *               , Monad[β]\n *               , Functor[β]\n *               , Applicative[β]\n *               , Semigroup[β]\n *               , Monoid[β]\n *               , Show\n */\nfunction Task(computation, cleanup) {\n  this.fork = computation;\n\n  this.cleanup = cleanup || function() {};\n}\n\n/**\n * Constructs a new `Task[α, β]` containing the single value `β`.\n *\n * `β` can be any value, including `null`, `undefined`, or another\n * `Task[α, β]` structure.\n *\n * @summary β → Task[α, β]\n */\nTask.prototype.of = function _of(b) {\n  return new Task(function(_, resolve) {\n    return resolve(b);\n  });\n};\n\nTask.of = Task.prototype.of;\n\n/**\n * Constructs a new `Task[α, β]` containing the single value `α`.\n *\n * `α` can be any value, including `null`, `undefined`, or another\n * `Task[α, β]` structure.\n *\n * @summary α → Task[α, β]\n */\nTask.prototype.rejected = function _rejected(a) {\n  return new Task(function(reject) {\n    return reject(a);\n  });\n};\n\nTask.rejected = Task.prototype.rejected;\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the successful value of the `Task[α, β]` using a regular unary\n * function.\n *\n * @summary @Task[α, β] => (β → γ) → Task[α, γ]\n */\nTask.prototype.map = function _map(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(a);\n    }, function(b) {\n      return resolve(f(b));\n    });\n  }, cleanup);\n};\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the succesful value of the `Task[α, β]` using a function to a\n * monad.\n *\n * @summary @Task[α, β] => (β → Task[α, γ]) → Task[α, γ]\n */\nTask.prototype.chain = function _chain(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(a);\n    }, function(b) {\n      return f(b).fork(reject, resolve);\n    });\n  }, cleanup);\n};\n\n// -- Apply ------------------------------------------------------------\n\n/**\n * Applys the successful value of the `Task[α, (β → γ)]` to the successful\n * value of the `Task[α, β]`\n *\n * @summary @Task[α, (β → γ)] => Task[α, β] → Task[α, γ]\n */\n\nTask.prototype.ap = function _ap(that) {\n  var forkThis = this.fork;\n  var forkThat = that.fork;\n  var cleanupThis = this.cleanup;\n  var cleanupThat = that.cleanup;\n\n  function cleanupBoth(state) {\n    cleanupThis(state[0]);\n    cleanupThat(state[1]);\n  }\n\n  return new Task(function(reject, resolve) {\n    var func, funcLoaded = false;\n    var val, valLoaded = false;\n    var rejected = false;\n    var allState;\n\n    var thisState = forkThis(guardReject, guardResolve(function(x) {\n      funcLoaded = true;\n      func = x;\n    }));\n\n    var thatState = forkThat(guardReject, guardResolve(function(x) {\n      valLoaded = true;\n      val = x;\n    }));\n\n    function guardResolve(setter) {\n      return function(x) {\n        if (rejected) {\n          return;\n        }\n\n        setter(x);\n        if (funcLoaded && valLoaded) {\n          delayed(function(){ cleanupBoth(allState) });\n          return resolve(func(val));\n        } else {\n          return x;\n        }\n      }\n    }\n\n    function guardReject(x) {\n      if (!rejected) {\n        rejected = true;\n        return reject(x);\n      }\n    }\n\n    return allState = [thisState, thatState];\n  }, cleanupBoth);\n};\n\n// -- Semigroup ------------------------------------------------------------\n\n/**\n * Selects the earlier of the two tasks `Task[α, β]`\n *\n * @summary @Task[α, β] => Task[α, β] → Task[α, β]\n */\n\nTask.prototype.concat = function _concat(that) {\n  var forkThis = this.fork;\n  var forkThat = that.fork;\n  var cleanupThis = this.cleanup;\n  var cleanupThat = that.cleanup;\n\n  function cleanupBoth(state) {\n    cleanupThis(state[0]);\n    cleanupThat(state[1]);\n  }\n\n  return new Task(function(reject, resolve) {\n    var done = false;\n    var allState;\n    var thisState = forkThis(guard(reject), guard(resolve));\n    var thatState = forkThat(guard(reject), guard(resolve));\n\n    return allState = [thisState, thatState];\n\n    function guard(f) {\n      return function(x) {\n        if (!done) {\n          done = true;\n          delayed(function(){ cleanupBoth(allState) })\n          return f(x);\n        }\n      };\n    }\n  }, cleanupBoth);\n\n};\n\n// -- Monoid ------------------------------------------------------------\n\n/**\n * Returns a Task that will never resolve\n *\n * @summary Void → Task[α, _]\n */\nTask.empty = function _empty() {\n  return new Task(function() {});\n};\n\nTask.prototype.empty = Task.empty;\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Task[α, β]`\n *\n * @summary @Task[α, β] => Void → String\n */\nTask.prototype.toString = function _toString() {\n  return 'Task';\n};\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Transforms a failure value into a new `Task[α, β]`. Does nothing if the\n * structure already contains a successful value.\n *\n * @summary @Task[α, β] => (α → Task[γ, β]) → Task[γ, β]\n */\nTask.prototype.orElse = function _orElse(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return f(a).fork(reject, resolve);\n    }, function(b) {\n      return resolve(b);\n    });\n  }, cleanup);\n};\n\n// -- Folds and extended transformations -------------------------------\n\n/**\n * Catamorphism. Takes two functions, applies the leftmost one to the failure\n * value, and the rightmost one to the successful value, depending on which one\n * is present.\n *\n * @summary @Task[α, β] => (α → γ), (β → γ) → Task[δ, γ]\n */\nTask.prototype.fold = function _fold(f, g) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return resolve(f(a));\n    }, function(b) {\n      return resolve(g(b));\n    });\n  }, cleanup);\n};\n\n/**\n * Catamorphism.\n *\n * @summary @Task[α, β] => { Rejected: α → γ, Resolved: β → γ } → Task[δ, γ]\n */\nTask.prototype.cata = function _cata(pattern) {\n  return this.fold(pattern.Rejected, pattern.Resolved);\n};\n\n/**\n * Swaps the disjunction values.\n *\n * @summary @Task[α, β] => Void → Task[β, α]\n */\nTask.prototype.swap = function _swap() {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return resolve(a);\n    }, function(b) {\n      return reject(b);\n    });\n  }, cleanup);\n};\n\n/**\n * Maps both sides of the disjunction.\n *\n * @summary @Task[α, β] => (α → γ), (β → δ) → Task[γ, δ]\n */\nTask.prototype.bimap = function _bimap(f, g) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(f(a));\n    }, function(b) {\n      return resolve(g(b));\n    });\n  }, cleanup);\n};\n\n/**\n * Maps the left side of the disjunction (failure).\n *\n * @summary @Task[α, β] => (α → γ) → Task[γ, β]\n */\nTask.prototype.rejectedMap = function _rejectedMap(f) {\n  var fork = this.fork;\n  var cleanup = this.cleanup;\n\n  return new Task(function(reject, resolve) {\n    return fork(function(a) {\n      return reject(f(a));\n    }, function(b) {\n      return resolve(b);\n    });\n  }, cleanup);\n};\n","module.exports = require('./task');\n","/* eslint-disable new-cap */\nimport { prop, find, identity, pipe } from \"ramda\";\nimport { createId } from \"./utils\";\nimport Either from \"data.either\";\nimport Task from \"data.task\";\nimport Immutable from \"seamless-immutable\";\nimport { fieldCreated } from \"../Actions\";\n\n// State -> String -> Either String Function\nconst typeConstructor = (state, fieldType) => {\n  return Either.of(state)\n    .map(prop(\"fieldTypes\"))\n    .map(find(v => v.info.type === fieldType))\n    .chain(Either.fromNullable)\n    .bimap(_ => `Field \"${fieldType}\" does not exist.`, identity);\n};\n\n// { initialState: Function } -> Task String Object\nconst createField = constr =>\n  new Task((reject, resolve) => {\n    // Make sure the promise is only resolved once\n    let called = false;\n    const fieldState = constr.initialState();\n\n    if (!(fieldState instanceof Promise)) {\n      resolve(fieldState);\n    } else {\n      fieldState\n      .then(v => {\n        if (called) { return; }\n        called = true;\n        resolve(v);\n      })\n      .catch(v => {\n        if (called) { throw v; }\n        called = true;\n        reject(v);\n      });\n    }\n  });\n\n// Object -> Object\nconst insertRequiredProps = field =>\n  Immutable(field).merge({\n    id: createId(),\n    configShowing: true,\n  }, {\n    deep: true,\n  });\n\nconst createFieldAsynchronously = (state, fieldType, asyncDispatch) =>\n  typeConstructor(state, fieldType)\n  .map(createField) // Either String (Task String Object)\n  .leftMap(Task.rejected)\n  .merge() // Task String Object\n  .map(insertRequiredProps)\n  .fork( // execute task\n    err => console.error(\"Task rejected\", err),\n    pipe(fieldCreated, asyncDispatch)\n  );\n\n// This is an async action. When it is finished it will trigger the\n// field created action\nexport default (state, { fieldType, asyncDispatch }) => {\n  createFieldAsynchronously(state, fieldType, asyncDispatch);\n  return state;\n};\n","var _concat = require('./internal/_concat');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list whose contents will be added to the beginning of the output\n *        list.\n * @return {Array} A new list containing the contents of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nmodule.exports = _curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\n","// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module lib/maybe\n */\nmodule.exports = Maybe\n\n// -- Aliases ----------------------------------------------------------\nvar clone         = Object.create\nvar unimplemented = function(){ throw new Error('Not implemented.') }\nvar noop          = function(){ return this                         }\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * A structure for values that may not be present, or computations that may\n * fail. `Maybe(a)` explicitly models the effects that are implicit in\n * `Nullable` types, thus has none of the problems associated with\n * `null` or `undefined` — like `NullPointerExceptions`.\n *\n * The class models two different cases:\n *\n *  + `Just a` — represents a `Maybe(a)` that contains a value. `a` may\n *     be any value, including `null` or `undefined`.\n *\n *  + `Nothing` — represents a `Maybe(a)` that has no values. Or a\n *     failure that needs no additional information.\n *\n * Common uses of this structure includes modelling values that may or may\n * not be present in a collection, thus instead of needing a\n * `collection.has(a)`, the `collection.get(a)` operation gives you all\n * the information you need — `collection.get(a).is-nothing` being\n * equivalent to `collection.has(a)`; Similarly the same reasoning may\n * be applied to computations that may fail to provide a value, e.g.:\n * `collection.find(predicate)` can safely return a `Maybe(a)` instance,\n * even if the collection contains nullable values.\n *\n * Furthermore, the values of `Maybe(a)` can be combined and manipulated\n * by using the expressive monadic operations. This allows safely\n * sequencing operations that may fail, and safely composing values that\n * you don't know whether they're present or not, failing early\n * (returning a `Nothing`) if any of the operations fail.\n *\n * If one wants to store additional information about failures, the\n * [Either][] and [Validation][] structures provide such a capability, and\n * should be used instead of the `Maybe(a)` structure.\n *\n * [Either]: https://github.com/folktale/data.either\n * [Validation]: https://github.com/folktale/data.validation\n *\n *\n * @class\n */\nfunction Maybe() {}\n\n// The case for successful values\nJust.prototype = clone(Maybe.prototype)\nfunction Just(a){\n  this.value = a\n}\n\n// The case for failure values\nNothing.prototype = clone(Maybe.prototype)\nfunction Nothing(){}\n\n\n// -- Constructors -----------------------------------------------------\n\n/**\n * Constructs a new `Maybe[α]` structure with an absent value. Commonly used\n * to represent a failure.\n *\n * @summary Void → Maybe[α]\n */\nMaybe.Nothing = function() {\n  return new Nothing\n}\nMaybe.prototype.Nothing = Maybe.Nothing\n\n/**\n * Constructs a new `Maybe[α]` structure that holds the single value\n * `α`. Commonly used to represent a success.\n *\n * `α` can be any value, including `null`, `undefined` or another\n * `Maybe[α]` structure.\n *\n * @summary α → Maybe[α]\n */\nMaybe.Just = function(a) {\n  return new Just(a)\n}\nMaybe.prototype.Just = Maybe.Just\n\n\n// -- Conversions ------------------------------------------------------\n\n/**\n * Constructs a new `Maybe[α]` structure from a nullable type.\n *\n * If the value is either `null` or `undefined`, this function returns a\n * `Nothing`, otherwise the value is wrapped in a `Just(α)`.\n *\n * @summary α → Maybe[α]\n */\nMaybe.fromNullable = function(a) {\n  return a != null?       new Just(a)\n  :      /* otherwise */  new Nothing\n}\nMaybe.prototype.fromNullable = Maybe.fromNullable\n\n/**\n * Constructs a new `Maybe[β]` structure from an `Either[α, β]` type.\n *\n * The left side of the `Either` becomes `Nothing`, and the right side\n * is wrapped in a `Just(β)`.\n *\n * @summary Either[α, β] → Maybe[β]\n */\nMaybe.fromEither = function(a) {\n  return a.fold(Maybe.Nothing, Maybe.Just)\n}\nMaybe.prototype.fromEither = Maybe.fromEither\n\n/**\n * Constructs a new `Maybe[β]` structure from a `Validation[α, β]` type.\n *\n * The failure side of the `Validation` becomes `Nothing`, and the right\n * side is wrapped in a `Just(β)`.\n *\n * @method\n * @summary Validation[α, β] → Maybe[β]\n */\nMaybe.fromValidation           = Maybe.fromEither\nMaybe.prototype.fromValidation = Maybe.fromEither\n\n\n// -- Predicates -------------------------------------------------------\n\n/**\n * True if the `Maybe[α]` structure contains a failure (i.e.: `Nothing`).\n *\n * @summary Boolean\n */\nMaybe.prototype.isNothing   = false\nNothing.prototype.isNothing = true\n\n\n/**\n * True if the `Maybe[α]` structure contains a single value (i.e.: `Just(α)`).\n *\n * @summary Boolean\n */\nMaybe.prototype.isJust = false\nJust.prototype.isJust  = true\n\n\n// -- Applicative ------------------------------------------------------\n\n/**\n * Creates a new `Maybe[α]` structure holding the single value `α`.\n *\n * `α` can be any value, including `null`, `undefined`, or another\n * `Maybe[α]` structure.\n *\n * @summary α → Maybe[α]\n */\nMaybe.of = function(a) {\n  return new Just(a)\n}\nMaybe.prototype.of = Maybe.of\n\n\n/**\n * Applies the function inside the `Maybe[α]` structure to another\n * applicative type.\n *\n * The `Maybe[α]` structure should contain a function value, otherwise a\n * `TypeError` is thrown.\n *\n * @method\n * @summary (@Maybe[α → β], f:Applicative[_]) => f[α] → f[β]\n */\nMaybe.prototype.ap = unimplemented\n\nNothing.prototype.ap = noop\n\nJust.prototype.ap = function(b) {\n  return b.map(this.value)\n}\n\n\n\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the value of the `Maybe[α]` structure using a regular unary\n * function.\n *\n * @method\n * @summary @Maybe[α] => (α → β) → Maybe[β]\n */\nMaybe.prototype.map   = unimplemented\nNothing.prototype.map = noop\n\nJust.prototype.map = function(f) {\n  return this.of(f(this.value))\n}\n\n\n// -- Chain ------------------------------------------------------------\n\n/**\n * Transforms the value of the `Maybe[α]` structure using an unary function\n * to monads.\n *\n * @method\n * @summary (@Maybe[α], m:Monad[_]) => (α → m[β]) → m[β]\n */\nMaybe.prototype.chain   = unimplemented\nNothing.prototype.chain = noop\n\nJust.prototype.chain = function(f) {\n  return f(this.value)\n}\n\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Maybe[α]` structure.\n *\n * @method\n * @summary @Maybe[α] => Void → String\n */\nMaybe.prototype.toString = unimplemented\n\nNothing.prototype.toString = function() {\n  return 'Maybe.Nothing'\n}\n\nJust.prototype.toString = function() {\n  return 'Maybe.Just(' + this.value + ')'\n}\n\n\n// -- Eq ---------------------------------------------------------------\n\n/**\n * Tests if a `Maybe[α]` structure is equal to another `Maybe[α]` structure.\n *\n * @method\n * @summary @Maybe[α] => Maybe[α] → Boolean\n */\nMaybe.prototype.isEqual = unimplemented\n\nNothing.prototype.isEqual = function(b) {\n  return b.isNothing\n}\n\nJust.prototype.isEqual = function(b) {\n  return b.isJust\n  &&     b.value === this.value\n}\n\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Extracts the value out of the `Maybe[α]` structure, if it\n * exists. Otherwise throws a `TypeError`.\n *\n * @method\n * @summary @Maybe[α] => Void → a,      :: partial, throws\n * @see {@link module:lib/maybe~Maybe#getOrElse} — A getter that can handle failures\n * @throws {TypeError} if the structure has no value (`Nothing`).\n */\nMaybe.prototype.get = unimplemented\n\nNothing.prototype.get = function() {\n  throw new TypeError(\"Can't extract the value of a Nothing.\")\n}\n\nJust.prototype.get = function() {\n  return this.value\n}\n\n\n/**\n * Extracts the value out of the `Maybe[α]` structure. If there is no value,\n * returns the given default.\n *\n * @method\n * @summary @Maybe[α] => α → α\n */\nMaybe.prototype.getOrElse = unimplemented\n\nNothing.prototype.getOrElse = function(a) {\n  return a\n}\n\nJust.prototype.getOrElse = function(_) {\n  return this.value\n}\n\n\n/**\n * Transforms a failure into a new `Maybe[α]` structure. Does nothing if the\n * structure already contains a value.\n *\n * @method\n * @summary @Maybe[α] => (Void → Maybe[α]) → Maybe[α]\n */\nMaybe.prototype.orElse = unimplemented\n\nNothing.prototype.orElse = function(f) {\n  return f()\n}\n\nJust.prototype.orElse = function(_) {\n  return this\n}\n\n\n/**\n * Catamorphism.\n * \n * @method\n * @summary @Maybe[α] => { Nothing: Void → β, Just: α → β } → β\n */\nMaybe.prototype.cata = unimplemented\n\nNothing.prototype.cata = function(pattern) {\n  return pattern.Nothing()\n}\n\nJust.prototype.cata = function(pattern) {\n  return pattern.Just(this.value);\n}\n\n\n/**\n * JSON serialisation\n *\n * @method\n * @summary @Maybe[α] => Void → Object\n */\nMaybe.prototype.toJSON = unimplemented\n\nNothing.prototype.toJSON = function() {\n  return { '#type': 'folktale:Maybe.Nothing' }\n}\n\nJust.prototype.toJSON = function() {\n  return { '#type': 'folktale:Maybe.Just'\n         , value: this.value }\n}\n","// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = require('./maybe')","import { curry, pipe, prop, over, append } from \"ramda\";\nimport { hideConfigs, StateLenses, pushHistoryState } from \"./utils\";\nimport Maybe from \"data.maybe\";\n\n// State -> Object -> State\nconst historyStateWithNewField = curry((state, newField) => pipe(\n  hideConfigs,\n  over(StateLenses.fieldsState, append(newField))\n)(state));\n\nexport default (state, { createdFieldState }) =>\n  Maybe.of(createdFieldState)\n  .map(historyStateWithNewField(state))\n  .map(prop(\"fieldsState\"))\n  .map(pushHistoryState(state))\n  .getOrElse(state);\n","/* eslint-disable no-nested-ternary */\nimport assert from \"fl-assert\";\nimport undo from \"./undo\";\nimport importState from \"./importState\";\nimport createField from \"./createField\";\nimport fieldCreated from \"./fieldCreated\";\n\nconst actionHandlers = {\n  undo,\n  importState,\n  createField,\n  fieldCreated,\n};\n\nconst isExpectedAction = a => a && a.type && actionHandlers[a.type];\nconst isReduxAction = a => a && a.type && a.type.includes(\"@@redux\");\n\n\nconst update = (state, action) =>\n  isExpectedAction(action)\n    ? actionHandlers[action.type](state, action)\n  : isReduxAction(action)\n    ? state\n  : assert(false, `Invalid action type: ${action.type}`);\n\nexport default update;\n","/* eslint-env jasmine */\n\nimport { undo as undoAction } from \"../../js/Actions\";\nimport update from \"../../js/Update\";\n\nconst currentFieldsState = [\"current\"];\nconst oldFieldsState = [\"old\"];\nconst mockState = {\n  fieldTypes: [],\n  fieldsState: currentFieldsState,\n  fieldsStateHistory: [oldFieldsState],\n};\n\nconst emptyMockState = {\n  fieldTypes: [],\n  fieldsState: [],\n  fieldsStateHistory: [],\n};\n\nconst emptyHistoryMockState = {\n  fieldTypes: [],\n  fieldsState: currentFieldsState,\n  fieldsStateHistory: [],\n};\n\ndescribe(\"Update.undo\", () => {\n  it(\"removes first old state from history\", () => {\n    const modifiedState = update(mockState, undoAction());\n    expect(modifiedState.fieldsStateHistory.length).toEqual(0);\n  });\n\n  it(\"sets first old state as current state\", () => {\n    const modifiedState = update(mockState, undoAction());\n    expect(modifiedState.fieldsState).toEqual(oldFieldsState);\n  });\n\n  it(\"doesn't modify the state if there aren't more history states to undo\", () => {\n    const modifiedState = update(emptyMockState, undoAction());\n    expect(modifiedState).toEqual(emptyMockState);\n  });\n\n  it(\"set's the current state to empty if there are no more history states\", () => {\n    const modifiedState = update(emptyHistoryMockState, undoAction());\n    expect(modifiedState.fieldsState.length).toEqual(0);\n  });\n});\n","/* eslint-env jasmine */\n/* eslint-disable quote-props */\n\nimport { importState } from \"../../js/Actions\";\nimport update from \"../../js/Update\";\n\nconst typesArray = [{\n  \"info\": {\n    \"type\": \"RadioButtons\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"Checkboxes\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"Dropdown\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"TextBox\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"EmailBox\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"TelephoneBox\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"NumberBox\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"TextArea\",\n  },\n}, {\n  \"info\": {\n    \"type\": \"DateField\",\n  },\n}];\n\nconst mockCurrentState = [\"a\", \"b\"];\nconst mockHistory = [];\nconst mockState = {\n  fieldTypes: typesArray,\n  fieldsState: mockCurrentState,\n  fieldsStateHistory: mockHistory,\n};\n\nconst newValidState = [{\n  \"type\": \"Checkboxes\",\n  \"displayName\": \"Checkboxes\",\n  \"group\": \"Options Components\",\n  \"htmlInputType\": \"checkbox\",\n  \"title\": \"Add a title\",\n  \"options\": [{\n    \"caption\": \"Insert an option\",\n  }],\n  \"newOptionCaption\": \"\",\n}];\n\nconst newInvalidState = [{\n  \"type\": \"Invalid type\",\n  \"displayName\": \"Checkboxes\",\n  \"group\": \"Options Components\",\n  \"htmlInputType\": \"checkbox\",\n  \"title\": \"Add a title\",\n  \"options\": [{\n    \"caption\": \"Insert an option\",\n  }],\n  \"newOptionCaption\": \"\",\n}];\n\ndescribe(\"Update.importState\", () => {\n  it(\"Returns an unchanged array if the new state is invalid\", () => {\n    expect(update(mockState, importState({}))).toEqual(mockState);\n    expect(update(mockState, importState(null))).toEqual(mockState);\n  });\n\n  it(\"Returns an unchanged array if the a field's type is not in fieldTypes\", () => {\n    expect(update(mockState, importState(newInvalidState))).toEqual(mockState);\n  });\n\n  it(\"Sends the last current state to the history\", () => {\n    const updated = update(mockState, importState(newValidState));\n    expect(updated.fieldsStateHistory[0].toString()).toEqual(mockCurrentState.toString());\n    expect(updated.fieldsStateHistory.length).toEqual(mockHistory.length + 1);\n  });\n\n  it(\"Sets the new state as current\", () => {\n    const updated = update(mockState, importState(newValidState));\n    expect(updated.fieldsState[0].type).toEqual(newValidState[0].type);\n    expect(updated.fieldsState[0].type).not.toEqual(undefined);\n    expect(updated.fieldsState[0].displayName).toEqual(newValidState[0].displayName);\n    expect(updated.fieldsState[0].displayName).not.toEqual(undefined);\n    expect(updated.fieldsState[0].group).toEqual(newValidState[0].group);\n    expect(updated.fieldsState[0].group).not.toEqual(undefined);\n  });\n});\n","/* eslint-env jasmine */\n/* eslint-disable quote-props */\n\nimport { createField } from \"../../js/Actions\";\nimport update from \"../../js/Update\";\n\nconst promiseTypeInstance = { type: \"promise-instance\" };\nconst promiseType = {\n  info: { type: \"PromiseType\" },\n  initialState: () => Promise.resolve(promiseTypeInstance),\n};\n\nconst syncTypeInstance = { type: \"sync-instance\" };\nconst syncType = {\n  info: { type: \"SyncType\" },\n  initialState: () => syncTypeInstance,\n};\n\nconst typesArray = [promiseType, syncType];\nconst mockCurrentState = [\"a\", \"b\"];\nconst mockHistory = [];\nconst mockState = {\n  fieldTypes: typesArray,\n  fieldsState: mockCurrentState,\n  fieldsStateHistory: mockHistory,\n};\n\ndescribe(\"Update.createField\", () => {\n  it(\"creates fields asynchronously\", done => {\n    const asyncDispatch = v => {\n      expect(v).not.toEqual(undefined);\n      done();\n    };\n\n    const asyncAcion = Object.assign(\n      { asyncDispatch },\n      createField(syncType.info.type)\n    );\n\n    update(mockState, asyncAcion);\n  });\n\n  it(\"returns a 'fieldCreated' action when field is created\", done => {\n    const asyncDispatch = action => {\n      expect(action.type).toEqual(\"fieldCreated\");\n      done();\n    };\n\n    const asyncAcion = Object.assign(\n      { asyncDispatch },\n      createField(syncType.info.type)\n    );\n\n    update(mockState, asyncAcion);\n  });\n\n  it(\"creates types with constructors that return a plain object\", done => {\n    const asyncDispatch = action => {\n      expect(action.createdFieldState).not.toEqual(undefined);\n      expect(action.createdFieldState.type).toEqual(syncTypeInstance.type);\n      done();\n    };\n\n    const asyncAcion = Object.assign(\n      { asyncDispatch },\n      createField(syncType.info.type)\n    );\n\n    update(mockState, asyncAcion);\n  });\n\n  it(\"creates types with constructors that return a promise\", done => {\n    const asyncDispatch = action => {\n      expect(action.createdFieldState).not.toEqual(undefined);\n      expect(action.createdFieldState.type).toEqual(promiseTypeInstance.type);\n      done();\n    };\n\n    const asyncAcion = Object.assign(\n      { asyncDispatch },\n      createField(promiseType.info.type)\n    );\n\n    update(mockState, asyncAcion);\n  });\n\n  it(\"adds required fields to instance\", done => {\n    const asyncDispatch = action => {\n      expect(action.createdFieldState.id).not.toEqual(undefined);\n      expect(typeof action.createdFieldState.configShowing).toEqual(\"boolean\");\n      done();\n    };\n\n    const asyncAcion = Object.assign(\n      { asyncDispatch },\n      createField(promiseType.info.type)\n    );\n\n    update(mockState, asyncAcion);\n  });\n\n  it(\"does not create a field if type is not in model.fieldTypes\", done => {\n    const asyncDispatch = jasmine.createSpy(\"asyncDispatch\");\n\n    const asyncAcion = Object.assign(\n      { asyncDispatch },\n      createField(\"non-existing-type\")\n    );\n\n    update(mockState, asyncAcion);\n\n    setTimeout(\n      () => { expect(asyncDispatch).not.toHaveBeenCalled(); done(); },\n      50\n    );\n  });\n});\n"],"names":["undo","_","importState","newFieldsState","createField","fieldType","fieldCreated","createdFieldState","describe","action","type","toEqual","mockStateToImport","global","asyncDispatchMiddleware","store","next","syncActivityFinished","actionQueue","flushQueue","forEach","a","dispatch","asyncDispatch","asyncAction","concat","actionWithAsyncDispatch","Immutable","merge","fakeAction","done","returnedAction","not","undefined","fakeAsyncAction","fakeStore","_isArray","_slice","require$$1","require$$0","_checkForMethod","_isPlaceholder","_curry1","_curry2","require$$2","_curry3","always","over","_arity","_pipe","_xwrap","bind","_isString","isArrayLike","_reduce","slice","require$$3","_concat","prop","_isTransformer","_dispatchable","_map","_xmap","_curryN","curryN","_has","_isArguments","keys","require$$6","require$$5","require$$4","map","lens","curry","updateAt","_default","keyArray","newVal","obj","deepNewVal","reduceRight","result","key","deep","StateLenses","_default2","_default3","createId","Date","now","toString","pushHistoryState","state","newHistoryState","_default4","_default5","fieldsStateHistory","_default6","fieldsState","_default7","hideConfigs","s","Object","assign","configShowing","lastHistoryState","Infinity","_identity","ap","prepend","sequence","_arrayFromIterator","_functionName","identical","_equals","Either","isArray","arr","Array","Right","Left","fieldTypeIsValid","validTypes","field","find","validFieldTypes","of","validateFieldsState","chain","fieldTypes","addRequiredProperties","fieldStates","bimap","console","error","getOrElse","_reduced","_xfBase","_xfind","Task","typeConstructor","v","info","fromNullable","constr","reject","resolve","called","fieldState","initialState","Promise","then","catch","insertRequiredProps","createFieldAsynchronously","leftMap","rejected","fork","err","Maybe","clone","unimplemented","noop","historyStateWithNewField","newField","actionHandlers","isExpectedAction","isReduxAction","includes","update","assert","currentFieldsState","oldFieldsState","mockState","emptyMockState","emptyHistoryMockState","modifiedState","undoAction","length","typesArray","mockCurrentState","mockHistory","newValidState","newInvalidState","updated","displayName","group","promiseTypeInstance","promiseType","syncTypeInstance","syncType","asyncAcion","id","jasmine","createSpy","toHaveBeenCalled"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"file":"ImageCards.js","sources":["examples/custom-type/src/ImageCards.js"],"sourcesContent":["//\n//\n//    THIS IS THE PRECOMPILED VERSION ON THIS FILE\n//\n//    LOOK INTO DIST FOLDER FOR COMPILED VERSION TE BE\n//\n//    INCLUDED IN THE BROWSER\n//\n\nimport React from 'react';\n\nconst typeInfo = {\n  // Compulsory\n  primitiveType: 'Dropdown',\n  type: 'ImageCards',\n  displayName: 'Image Cards',\n  group: 'Custom Components',\n  required: false,\n\n  // Component specific fields\n  title: 'My image component',\n  options: [\n    'http://ingridwu.dmmdmcfatter.com/wp-content/uploads/2015/01/placeholder.png',\n  ],\n\n  newImageText: '',\n};\n\n\n// For Text Fields the initialState function will only return an object.\nconst initialState = () => Object.assign({}, typeInfo);\n\n// When configuration is open, this is what is going to be displayed\n/**\n * @method RenderConfigMode\n * @param  {Object} state : State\n * @param  {Function} update : State -> void // Will trigger a re-render\n */\nconst RenderEditor = ({ state, update }) => {\n  const updateNewImageText = event => {\n    const text = event.target.value;\n    const newState = Object.assign(\n      {},\n      state,\n      { newImageText: text }\n    );\n\n    update(newState);\n  };\n\n  const addNewImage = event => {\n    if (event.key !== 'Enter') { return; }\n    const text = event.target.value;\n    const newState = Object.assign(\n      {},\n      state,\n      { newImageText: '',\n        images: state.options.concat([text]),\n      }\n    );\n\n    update(newState);\n  };\n\n  return (\n    <div>\n      {state.options.map(img => <img alt={img} className=\"ImageCards-card\" src={img} />)}\n\n      {!state.configShowing\n        ? null\n        : (\n        <div className=\"fl-fb-Field-config\">\n          <input\n            type=\"text\"\n            value={state.newImageText}\n            onChange={updateNewImageText}\n            onKeyDown={addNewImage}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ImageCards = {\n  info: typeInfo,\n  initialState,\n  RenderEditor,\n};\n\nexport default ImageCards;\n"],"names":["typeInfo","initialState","Object","assign","RenderEditor","state","update","updateNewImageText","event","text","target","value","newState","newImageText","addNewImage","key","options","concat","map","img","configShowing","ImageCards"],"mappings":";;;;;;;;AAAA;;;;;;;;;AASA,AAEA,MAAMA,WAAW;;iBAEA,UAFA;QAGT,YAHS;eAIF,aAJE;SAKR,mBALQ;YAML,KANK;;;SASR,oBATQ;WAUN,CACP,6EADO,CAVM;;gBAcD;CAdhB;;;AAmBA,MAAMC,eAAe,MAAMC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,CAA3B;;;;;;;;AAQA,MAAMI,eAAe,CAAC,EAAEC,KAAF,EAASC,MAAT,EAAD,KAAuB;QACpCC,qBAAqBC,SAAS;UAC5BC,OAAOD,MAAME,MAAN,CAAaC,KAA1B;UACMC,WAAWV,OAAOC,MAAP,CACf,EADe,EAEfE,KAFe,EAGf,EAAEQ,cAAcJ,IAAhB,EAHe,CAAjB;;WAMOG,QAAP;GARF;;QAWME,cAAcN,SAAS;QACvBA,MAAMO,GAAN,KAAc,OAAlB,EAA2B;;;UACrBN,OAAOD,MAAME,MAAN,CAAaC,KAA1B;UACMC,WAAWV,OAAOC,MAAP,CACf,EADe,EAEfE,KAFe,EAGf,EAAEQ,cAAc,EAAhB;cACUR,MAAMW,OAAN,CAAcC,MAAd,CAAqB,CAACR,IAAD,CAArB;KAJK,CAAjB;;WAQOG,QAAP;GAXF;;SAeE;;;UACSI,OAAN,CAAcE,GAAd,CAAkBC,OAAO,6BAAK,KAAKA,GAAV,EAAe,WAAU,iBAAzB,EAA2C,KAAKA,GAAhD,GAAzB,CADH;KAGId,MAAMe,aAAP,GACG,IADH,GAGC;;QAAK,WAAU,oBAAf;;cAES,MADP;eAESf,MAAMQ,YAFf;kBAGYN,kBAHZ;mBAIaO;;;GAZrB;CA1BF;;AA8CA,MAAMO,aAAa;QACXrB,QADW;cAAA;;CAAnB,CAMA;;;;","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9ob21lL21hcmNlbG8vUHJvZ3JhbXMvRm91ckxhYnMvQ29tcG9uZW50cy9mbC1mb3JtLWJ1aWxkZXIvZXhhbXBsZXMvY3VzdG9tLXR5cGUvc3JjL0ltYWdlQ2FyZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vXG4vLyAgICBUSElTIElTIFRIRSBQUkVDT01QSUxFRCBWRVJTSU9OIE9OIFRISVMgRklMRVxuLy9cbi8vICAgIExPT0sgSU5UTyBESVNUIEZPTERFUiBGT1IgQ09NUElMRUQgVkVSU0lPTiBURSBCRVxuLy9cbi8vICAgIElOQ0xVREVEIElOIFRIRSBCUk9XU0VSXG4vL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCB0eXBlSW5mbyA9IHtcbiAgLy8gQ29tcHVsc29yeVxuICBwcmltaXRpdmVUeXBlOiAnRHJvcGRvd24nLFxuICB0eXBlOiAnSW1hZ2VDYXJkcycsXG4gIGRpc3BsYXlOYW1lOiAnSW1hZ2UgQ2FyZHMnLFxuICBncm91cDogJ0N1c3RvbSBDb21wb25lbnRzJyxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuXG4gIC8vIENvbXBvbmVudCBzcGVjaWZpYyBmaWVsZHNcbiAgdGl0bGU6ICdNeSBpbWFnZSBjb21wb25lbnQnLFxuICBvcHRpb25zOiBbXG4gICAgJ2h0dHA6Ly9pbmdyaWR3dS5kbW1kbWNmYXR0ZXIuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE1LzAxL3BsYWNlaG9sZGVyLnBuZycsXG4gIF0sXG5cbiAgbmV3SW1hZ2VUZXh0OiAnJyxcbn07XG5cblxuLy8gRm9yIFRleHQgRmllbGRzIHRoZSBpbml0aWFsU3RhdGUgZnVuY3Rpb24gd2lsbCBvbmx5IHJldHVybiBhbiBvYmplY3QuXG5jb25zdCBpbml0aWFsU3RhdGUgPSAoKSA9PiBPYmplY3QuYXNzaWduKHt9LCB0eXBlSW5mbyk7XG5cbi8vIFdoZW4gY29uZmlndXJhdGlvbiBpcyBvcGVuLCB0aGlzIGlzIHdoYXQgaXMgZ29pbmcgdG8gYmUgZGlzcGxheWVkXG4vKipcbiAqIEBtZXRob2QgUmVuZGVyQ29uZmlnTW9kZVxuICogQHBhcmFtICB7T2JqZWN0fSBzdGF0ZSA6IFN0YXRlXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gdXBkYXRlIDogU3RhdGUgLT4gdm9pZCAvLyBXaWxsIHRyaWdnZXIgYSByZS1yZW5kZXJcbiAqL1xuY29uc3QgUmVuZGVyRWRpdG9yID0gKHsgc3RhdGUsIHVwZGF0ZSB9KSA9PiB7XG4gIGNvbnN0IHVwZGF0ZU5ld0ltYWdlVGV4dCA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCB0ZXh0ID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgc3RhdGUsXG4gICAgICB7IG5ld0ltYWdlVGV4dDogdGV4dCB9XG4gICAgKTtcblxuICAgIHVwZGF0ZShuZXdTdGF0ZSk7XG4gIH07XG5cbiAgY29uc3QgYWRkTmV3SW1hZ2UgPSBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VudGVyJykgeyByZXR1cm47IH1cbiAgICBjb25zdCB0ZXh0ID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgc3RhdGUsXG4gICAgICB7IG5ld0ltYWdlVGV4dDogJycsXG4gICAgICAgIGltYWdlczogc3RhdGUub3B0aW9ucy5jb25jYXQoW3RleHRdKSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdXBkYXRlKG5ld1N0YXRlKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICB7c3RhdGUub3B0aW9ucy5tYXAoaW1nID0+IDxpbWcgYWx0PXtpbWd9IGNsYXNzTmFtZT1cIkltYWdlQ2FyZHMtY2FyZFwiIHNyYz17aW1nfSAvPil9XG5cbiAgICAgIHshc3RhdGUuY29uZmlnU2hvd2luZ1xuICAgICAgICA/IG51bGxcbiAgICAgICAgOiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmwtZmItRmllbGQtY29uZmlnXCI+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2YWx1ZT17c3RhdGUubmV3SW1hZ2VUZXh0fVxuICAgICAgICAgICAgb25DaGFuZ2U9e3VwZGF0ZU5ld0ltYWdlVGV4dH1cbiAgICAgICAgICAgIG9uS2V5RG93bj17YWRkTmV3SW1hZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgSW1hZ2VDYXJkcyA9IHtcbiAgaW5mbzogdHlwZUluZm8sXG4gIGluaXRpYWxTdGF0ZSxcbiAgUmVuZGVyRWRpdG9yLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VDYXJkcztcbiJdLCJuYW1lcyI6WyJ0eXBlSW5mbyIsImluaXRpYWxTdGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsIlJlbmRlckVkaXRvciIsInN0YXRlIiwidXBkYXRlIiwidXBkYXRlTmV3SW1hZ2VUZXh0IiwiZXZlbnQiLCJ0ZXh0IiwidGFyZ2V0IiwidmFsdWUiLCJuZXdTdGF0ZSIsIm5ld0ltYWdlVGV4dCIsImFkZE5ld0ltYWdlIiwia2V5Iiwib3B0aW9ucyIsImNvbmNhdCIsIm1hcCIsImltZyIsImNvbmZpZ1Nob3dpbmciLCJJbWFnZUNhcmRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7Ozs7QUFTQSxBQUVBLE1BQU1BLFdBQVc7O2lCQUVBLFVBRkE7UUFHVCxZQUhTO2VBSUYsYUFKRTtTQUtSLG1CQUxRO1lBTUwsS0FOSzs7O1NBU1Isb0JBVFE7V0FVTixDQUNQLDZFQURPLENBVk07O2dCQWNEO0NBZGhCOzs7QUFtQkEsTUFBTUMsZUFBZSxNQUFNQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkgsUUFBbEIsQ0FBM0I7Ozs7Ozs7O0FBUUEsTUFBTUksZUFBZSxDQUFDLEVBQUVDLEtBQUYsRUFBU0MsTUFBVCxFQUFELEtBQXVCO1FBQ3BDQyxxQkFBcUJDLFNBQVM7VUFDNUJDLE9BQU9ELE1BQU1FLE1BQU4sQ0FBYUMsS0FBMUI7VUFDTUMsV0FBV1YsT0FBT0MsTUFBUCxDQUNmLEVBRGUsRUFFZkUsS0FGZSxFQUdmLEVBQUVRLGNBQWNKLElBQWhCLEVBSGUsQ0FBakI7O1dBTU9HLFFBQVA7R0FSRjs7UUFXTUUsY0FBY04sU0FBUztRQUN2QkEsTUFBTU8sR0FBTixLQUFjLE9BQWxCLEVBQTJCOzs7VUFDckJOLE9BQU9ELE1BQU1FLE1BQU4sQ0FBYUMsS0FBMUI7VUFDTUMsV0FBV1YsT0FBT0MsTUFBUCxDQUNmLEVBRGUsRUFFZkUsS0FGZSxFQUdmLEVBQUVRLGNBQWMsRUFBaEI7Y0FDVVIsTUFBTVcsT0FBTixDQUFjQyxNQUFkLENBQXFCLENBQUNSLElBQUQsQ0FBckI7S0FKSyxDQUFqQjs7V0FRT0csUUFBUDtHQVhGOztTQWVFOzs7VUFDU0ksT0FBTixDQUFjRSxHQUFkLENBQWtCQyxPQUFPLDZCQUFLLEtBQUtBLEdBQVYsRUFBZSxXQUFVLGlCQUF6QixFQUEyQyxLQUFLQSxHQUFoRCxHQUF6QixDQURIO0tBR0lkLE1BQU1lLGFBQVAsR0FDRyxJQURILEdBR0M7O1FBQUssV0FBVSxvQkFBZjs7Y0FFUyxNQURQO2VBRVNmLE1BQU1RLFlBRmY7a0JBR1lOLGtCQUhaO21CQUlhTzs7O0dBWnJCO0NBMUJGOztBQThDQSxNQUFNTyxhQUFhO1FBQ1hyQixRQURXO2NBQUE7O0NBQW5CLENBTUE7Ozs7In0="}
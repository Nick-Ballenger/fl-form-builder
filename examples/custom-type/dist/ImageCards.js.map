{"version":3,"file":"ImageCards.js","sources":["demo/custom-type/src/ImageCards.js"],"sourcesContent":["//\n//\n//    THIS IS THE PRECOMPILED VERSION ON THIS FILE\n//\n//    LOOK INTO DIST FOLDER FOR COMPILED VERSION TE BE\n//\n//    INCLUDED IN THE BROWSER\n//\n\nimport React from 'react';\n\nconst typeInfo = {\n  // Compulsory\n  primitiveType: 'Dropdown',\n  type: 'ImageCards',\n  displayName: 'Image Cards',\n  group: 'Custom Components',\n  required: false,\n\n  // Component specific fields\n  title: 'My image component',\n  options: [\n    'http://ingridwu.dmmdmcfatter.com/wp-content/uploads/2015/01/placeholder.png',\n  ],\n\n  newImageText: '',\n};\n\n\n// For Text Fields the initialState function will only return an object.\nconst initialState = () => Object.assign({}, typeInfo);\n\n// When configuration is open, this is what is going to be displayed\n/**\n * @method RenderConfigMode\n * @param  {Object} state : State\n * @param  {Function} update : State -> void // Will trigger a re-render\n */\nconst RenderEditor = ({ state, update }) => {\n  const updateNewImageText = event => {\n    const text = event.target.value;\n    const newState = Object.assign(\n      {},\n      state,\n      { newImageText: text }\n    );\n\n    update(newState);\n  };\n\n  const addNewImage = event => {\n    if (event.key !== 'Enter') { return; }\n    const text = event.target.value;\n    const newState = Object.assign(\n      {},\n      state,\n      { newImageText: '',\n        images: state.options.concat([text]),\n      }\n    );\n\n    update(newState);\n  };\n\n  return (\n    <div>\n      {state.options.map(img => <img alt={img} className=\"ImageCards-card\" src={img} />)}\n\n      {!state.configShowing\n        ? null\n        : (\n        <div className=\"fl-fb-Field-config\">\n          <input\n            type=\"text\"\n            value={state.newImageText}\n            onChange={updateNewImageText}\n            onKeyDown={addNewImage}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ImageCards = {\n  info: typeInfo,\n  initialState,\n  RenderEditor,\n};\n\nexport default ImageCards;\n"],"names":["typeInfo","initialState","Object","assign","RenderEditor","state","update","updateNewImageText","text","event","target","value","newState","newImageText","addNewImage","key","options","concat","map","img","configShowing","ImageCards"],"mappings":";;;;;;;;AAAA;;;;;;;;;AASA,AAEA,IAAMA,WAAW;;iBAEA,UAFA;QAGT,YAHS;eAIF,aAJE;SAKR,mBALQ;YAML,KANK;;;SASR,oBATQ;WAUN,CACP,6EADO,CAVM;;gBAcD;CAdhB;;;AAmBA,IAAMC,eAAe,SAAfA,YAAe;SAAMC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,CAAN;CAArB;;;;;;;;AAQA,IAAMI,eAAe,SAAfA,YAAe,OAAuB;MAApBC,KAAoB,QAApBA,KAAoB;MAAbC,MAAa,QAAbA,MAAa;;MACpCC,qBAAqB,SAArBA,kBAAqB,QAAS;QAC5BC,OAAOC,MAAMC,MAAN,CAAaC,KAA1B;QACMC,WAAWV,OAAOC,MAAP,CACf,EADe,EAEfE,KAFe,EAGf,EAAEQ,cAAcL,IAAhB,EAHe,CAAjB;;WAMOI,QAAP;GARF;;MAWME,cAAc,SAAdA,WAAc,QAAS;QACvBL,MAAMM,GAAN,KAAc,OAAlB,EAA2B;;;QACrBP,OAAOC,MAAMC,MAAN,CAAaC,KAA1B;QACMC,WAAWV,OAAOC,MAAP,CACf,EADe,EAEfE,KAFe,EAGf,EAAEQ,cAAc,EAAhB;cACUR,MAAMW,OAAN,CAAcC,MAAd,CAAqB,CAACT,IAAD,CAArB;KAJK,CAAjB;;WAQOI,QAAP;GAXF;;SAeE;;;UACSI,OAAN,CAAcE,GAAd,CAAkB;aAAO,6BAAK,KAAKC,GAAV,EAAe,WAAU,iBAAzB,EAA2C,KAAKA,GAAhD,GAAP;KAAlB,CADH;KAGId,MAAMe,aAAP,GACG,IADH,GAGC;;QAAK,WAAU,oBAAf;;cAES,MADP;eAESf,MAAMQ,YAFf;kBAGYN,kBAHZ;mBAIaO;;;GAZrB;CA1BF;;AA8CA,IAAMO,aAAa;QACXrB,QADW;4BAAA;;CAAnB,CAMA;;;;","sourceRoot":"/source/"}